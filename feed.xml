<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-12-15T23:03:38-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle>Researcher in Generative AI and Trustworthy AI
</subtitle><entry><title type="html">What the heck is Safety Checker in Stable Diffusion</title><link href="http://localhost:4000/blog/2024/safety-checker/" rel="alternate" type="text/html" title="What the heck is Safety Checker in Stable Diffusion" /><published>2024-12-13T00:00:00-08:00</published><updated>2024-12-13T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/safety-checker</id><content type="html" xml:base="http://localhost:4000/blog/2024/safety-checker/"><![CDATA[]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Some notes on NeurIPS 2024</title><link href="http://localhost:4000/blog/2024/neurips24/" rel="alternate" type="text/html" title="Some notes on NeurIPS 2024" /><published>2024-12-13T00:00:00-08:00</published><updated>2024-12-13T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/neurips24</id><content type="html" xml:base="http://localhost:4000/blog/2024/neurips24/"><![CDATA[<h2 id="our-poster-at-neurips-2024-">Our poster at NeurIPS 2024 üéØ</h2>

<p>I‚Äôm proud to share that our poster received quite a bit of attention at NeurIPS 2024! Several people intentionally came to our poster to discuss our work, and many others stopped by to ask questions (thanks to the big photo of Taylor Swift üé§).</p>

<p>I‚Äôm also excited to see how our idea of the <strong>concept graph</strong> üï∏Ô∏è‚Äîintroduced in <a href="https://arxiv.org/abs/2410.15618">our NeurIPS paper</a> and complemented by <a href="https://openreview.net/forum?id=tZdqL5FH7w">our under-review paper</a>‚Äîcan be connected to many other works, not only in <strong>machine unlearning</strong> but also in topics like <strong>personalization</strong>, <strong>controllable generation/editing</strong>, and <strong>model debiasing</strong> within Generative AI.</p>

<p>In a nutshell, the concept graph represents a model‚Äôs knowledge as a graph, where nodes are concepts, and edges represent the relationships between those concepts. Understanding this graph structure is essential for many tasks, such as:</p>

<ul>
  <li><strong>Machine Unlearning</strong> üóëÔ∏è: The goal here is to remove the model‚Äôs knowledge of certain concepts while retaining its knowledge of others. The concept graph structure helps identify which concepts are critical to the model‚Äôs performance and should be preserved.</li>
  <li><strong>Personalization</strong> üë§: The goal is to personalize the model‚Äôs knowledge for a specific user. For instance, changing ‚Äúa photo of a <em>cat</em> before Vancouver Convention Center‚Äù to ‚Äúa photo of a <em>cat</em> before the user‚Äôs house.‚Äù Traditional methods like Dreambooth, which fine-tune the model on a small user-specific dataset, often overfit to the specific concept and degrade the model‚Äôs general capability. Prior approaches address this by collecting large datasets of <strong>heuristically selected concepts</strong>‚Äîe.g., if the personalized concept is ‚Äúa user‚Äôs house,‚Äù the preservation dataset would include a variety of house images. Our concept graph structure can help identify which concepts are specific to the user and should be preserved, improving the balance between personalization and generalization.</li>
</ul>

<p>I also had the opportunity to discuss related works with their authors and promote our concept graph structure. While these works are already impressive, I believe incorporating our concept graph could help improve their results even further. ‚ú®</p>

<p>NeurIPS 2024 marked my first in-person conference, and I must admit it was a bit overwhelming. There were so many excellent works to read more, many new ideas to explore, and a few disappointing moments when seeing some of my future ideas had already been done. üòÖ Nonetheless, it was an eye-opening experience, and I guess my upcoming holiday assignment is to wrap up and review the many fascinating works in <strong>machine unlearning</strong> and <strong>personalization</strong>. Stay tuned for that! üìö</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/unlearn-one-layer-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/unlearn-one-layer-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/unlearn-one-layer-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/unlearn-one-layer.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Unlearning by fine-tuning only one layer of the model. Our concept graph can help to design a better retain set in this case.
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/negative-guidance-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/negative-guidance-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/negative-guidance-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/negative-guidance.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    This cool work proposes an adaptive scaling factor for negative guidance to improve the quality and diversity of the generated images after avoiding some specific concepts in the negative prompt, e.g., `An English breakfast` but without `Egg`. Our concept graph structure can help to identify more similar concepts to the negative concept to avoid.
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/poster-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/poster-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/poster-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/poster.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Some people stopped by our poster! I stayed away from the poster after a bit tired of presenting our work constantly.
</div>

<h2 id="how-to-make-the-most-of-attending-a-conference">How to make the most of attending a conference</h2>

<p>NeurIPS 2024 marks the first time I attended a conference in person (yes, after joining academia in 2019 as a PhD student). Since it was my first time, besides the excitement of meeting some of the most brilliant researchers in the field, I also felt a bit nervous and overwhelmed. Many things were new to me, so I wanted to note them down here to make the most of any future conferences.</p>

<h3 id="the-goal">The Goal</h3>

<p>NeurIPS is one of the largest and most prestigious conferences in the field, with around 4,500 accepted papers, a packed schedule, and numerous activities over six days (from Tue, Dec 10 to Sun, Dec 15). It‚Äôs impossible to attend all the sessions, and the feeling of being overwhelmed and fearing missing out is very real (you can see many people walking around quickly with phones in hand, scrolling through the Whova app).</p>

<p>For me, the most important thing was to set a clear goal. Specifically:</p>

<ul>
  <li><strong>Goal</strong>: Connect with people, make friends, find job opportunities, or learn about the latest research in a specific topic. While some people are very good at achieving all these goals simultaneously, I focused on learning the latest research only at this conference. Somehow, I was not ready for networking activities.</li>
  <li><strong>Topics</strong>: Narrow down the topics of interest, such as machine unlearning, personalization, etc.</li>
</ul>

<h3 id="the-tools">The Tools</h3>

<p>Even with a narrow goal and specific topics, it‚Äôs easy to get lost in the conference. Here are some tools I found helpful:</p>

<ul>
  <li><strong>Whova</strong>: The conference app, which is incredibly useful for checking schedules, locating session venues, and managing poster sessions.
    <ul>
      <li><strong>My Agenda</strong>: Replaces Google Calendar during the event.</li>
      <li><strong>Search in Agenda</strong>: Makes it easy to find sessions/posters/activities using keywords.</li>
      <li><strong>Attendee List</strong>: Allows searching for people with specific interests, e.g., Vietnamese researchers by searching for <code class="language-plaintext highlighter-rouge">Nguyen</code> in the name. :D</li>
      <li><strong>My Profile</strong>: It‚Äôs important to update your profile to make it more visible to others (e.g., Interests, Education, Location). Thanks to this, I was contacted by someone from Databricks who had also been at Monash University and will visit Melbourne next year. We‚Äôre planning to meet for coffee!</li>
    </ul>
  </li>
  <li><strong>LinkedIn and X (formerly Twitter)</strong>: Use conference tags like <code class="language-plaintext highlighter-rouge">#neurips2024</code> to find interesting events or people. I discovered several job postings this way and also came across this helpful website: <a href="https://jalammar.github.io/assets/neurips_2024.html">https://jalammar.github.io/assets/neurips_2024.html</a>, which simplifies navigating through the papers. It‚Äôs also a great distraction when bored. :D</li>
  <li><strong>Google Maps</strong>: Download offline maps because you may not always have an internet connection (poor researchers can‚Äôt afford roaming fees or visitor 4G SIMs).</li>
</ul>

<h3 id="the-activities">The Activities</h3>

<ul>
  <li><strong>Poster Sessions</strong>: The most exciting part of the conference, offering a glimpse into the research community as people walk around discussing ideas. While nowaday, we can find any posters or papers we want on the conference site, the energy and excitement of walking around and discussing ideas with authors directly is still unmatched. Moreover, when discussing or seeing the authors, you can also have a feel of their personality and research style that you never get from reading papers. These signals are also important to filter out the good papers from the bad ones. The design of a poster might also give you a hint of the quality of the paper.</li>
  <li><strong>Tutorials</strong> and <strong>Workshops</strong>: These sessions are focused, sometimes small (not true for NeurIPS), and directly related to your topics of interest.</li>
  <li><strong>Oral Sessions</strong>: Featuring the best papers of the conference, these sessions are inspiring. In NeurIPS 2024, I found three oral presentations particularly fascinating. What inspired me most was that all these works were based on simple yet effective ideas‚Äîproving that you don‚Äôt have to be a hardcore mathematician or statistician to produce great work at NeurIPS.</li>
  <li><strong>Job Fair - Sponsor Sessions</strong>: An excellent opportunity to find job openings, learn about industry research/products, and grab freebies! This year, I saw many demos on LLMs, such as Amazon‚Äôs debugging assistant on AWS and Microsoft‚Äôs <code class="language-plaintext highlighter-rouge">trace</code> agent tool. A startup called <code class="language-plaintext highlighter-rouge">Virtue</code>, founded by prominent researchers in the Trustworthy AI community, showcased their automated red-teaming solution.</li>
</ul>

<p>While many people enjoy networking activities like <strong>Coffee Chats</strong> or <strong>Company Parties</strong>, I wasn‚Äôt ready for those and felt a bit shy about starting a conversation.</p>

<h3 id="other-activities">Other Activities</h3>

<ul>
  <li><strong>Visiting Friends</strong>: I was fortunate to catch up with two old friends from Monash University and Viettel in Vancouver, chatting about our old days.</li>
  <li><strong>Exploring the City</strong>: Vancouver is a beautiful city with a stunning harbor view. I also have a chance to see the dark side of the city with many homeless people and drug addicts.</li>
  <li><strong>Staying Healthy</strong>: Jetlag hit me hard after a 19-hour flight from Melbourne. I didn‚Äôt do well in maintaining my health this time (poor sleep, too much curry and coffee, and lack of exercise). I‚Äôll aim to do better next time.</li>
</ul>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/vancouver-habor-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/vancouver-habor-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/vancouver-habor-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/vancouver-habor.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Stunning Vancouver harbor view (sadly that my phone can't capture it)
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/steam-clock-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/steam-clock-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/steam-clock-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/steam-clock.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Gastown Steam Clock
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/freebies-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/freebies-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/freebies-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/freebies.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    My biggest achievement!
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/deepmind-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/deepmind-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/deepmind-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/deepmind.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/xLSTM-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/xLSTM-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/xLSTM-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/xLSTM.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Some examples of crowded posters, either with DeepMind icon on it or with a curious topic.
</div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/hoang-yen.JPG-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/hoang-yen.JPG-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/hoang-yen.JPG-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/hoang-yen.JPG" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NeurIPS2024/kokoro-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NeurIPS2024/kokoro-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NeurIPS2024/kokoro-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/NeurIPS2024/kokoro.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    With Tu at Hoang Yen restaurant (1 Michelin star restaurant in Vancouver :D) and with Nhan at Kokoro restaurant.
</div>]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[Our poster at NeurIPS 2024 üéØ]]></summary></entry><entry><title type="html">Random Thoughts and Notes</title><link href="http://localhost:4000/blog/2024/thoughts/" rel="alternate" type="text/html" title="Random Thoughts and Notes" /><published>2024-11-18T00:00:00-08:00</published><updated>2024-11-18T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/thoughts</id><content type="html" xml:base="http://localhost:4000/blog/2024/thoughts/"><![CDATA[<h2 id="openai-email-archives-from-musk-v-altman---game-of-thrones">OpenAI email archives from Musk v Altman - Game of Thrones</h2>

<p>Reference: <a href="https://www.lesswrong.com/posts/5jjk4CDnj9tA7ugxr/openai-email-archives-from-musk-v-altman">OpenAI email archives from Musk v Altman by LessWrong</a></p>

<p>These emails are part of the ongoing legal disputes between Elon Musk and Sam Altman surrounding recent OpenAI developments. Thanks to this, the public has gained access to email exchanges between some of the most powerful figures in the tech world today, including Elon Musk, Sam Altman, Greg Brockman, Ilya Sutskever, and Andrew Karpathy.</p>

<p>For me, this has been an eye-opening experience, especially for someone who is still learning about the tech world, Silicon Valley, startups, and entrepreneurship. It can be compared to MIT or Stanford releasing their lectures to the world.</p>

<p>After reading through the content, I think the story can be divided into the following chapters:</p>

<hr />

<p><strong><em>Chapter 1: Origins - The noble idea of AI for everyone</em></strong></p>

<p>The idea began on May 25, 2015, when Sam Altman sent an email to Elon Musk about a concept for a ‚ÄúManhattan Project for AI‚Äù ‚Äî ensuring that the tech belongs to the world through some sort of nonprofit.<br />
Elon Musk quickly responded, showing enthusiasm for the idea.<br />
Throughout the emails, I noticed Elon Musk repeatedly expressing concern (or even obsession) about Google, DeepMind, and the possibility of Google creating AGI and dominating the world.<br />
From the very first email, Sam Altman, somehow, seemed to understand Elon Musk‚Äôs concerns or perhaps shared the same fears. He mentioned the need to ‚Äúdo something to prevent Google from being the first to create AGI,‚Äù quickly gaining Elon Musk‚Äôs agreement.</p>

<hr />

<p><strong><em>Chapter 2: The first building blocks - Contracts to attract initial talent for OpenAI</em></strong></p>

<p>The next phase focused on drafting contracts (offer letters or compensation frameworks) to attract the first talents to work at OpenAI, discussing ‚Äúopening paragraphs‚Äù for OpenAI‚Äôs vision, and even deciding what to say in ‚Äúa Wired article.‚Äù</p>

<p>What I found interesting here were:</p>

<ul>
  <li>How these people communicated via email: direct, straight to the point, and concise.</li>
  <li>The founders‚Äô emphasis on building an excellent founding team and carefully considering contract details.</li>
  <li>Elon Musk‚Äôs willingness to personally meet and convince individuals to join OpenAI.</li>
</ul>

<hr />

<p><strong><em>Chapter 3: Conflict - The battle for leadership control</em></strong></p>

<p>Conflict seemed to arise around August 2017 (Shivon Zilis to Elon Musk, cc: Sam Teller, Aug 28, 2017, 12:01 AM), when Greg and Ilya expressed concerns about Elon Musk‚Äôs management, such as:</p>

<ul>
  <li>‚ÄúHow much time does Elon want to spend on this, and how much time can he actually afford to spend on this?‚Äù</li>
  <li>They were okay with less time/less control or more time/more control, but not less time/more control. Their fear was that without enough time, there wouldn‚Äôt be adequate discussion to make informed decisions.</li>
</ul>

<p>Elon responded:</p>
<ul>
  <li>‚ÄúThis is very annoying. Please encourage them to go start a company. I‚Äôve had enough.‚Äù</li>
</ul>

<p>The highlight of this chapter might be an email from Ilya Sutskever to Elon Musk, Sam Altman, cc: Greg Brockman, Sam Teller, Shivon Zilis (Sep 20, 2017, 2:08 PM), where Ilya and Greg said:</p>

<ul>
  <li>
    <p>To Elon: ‚ÄúThe current structure provides you with a path where you end up with unilateral absolute control over the AGI. You stated that you don‚Äôt want to control the final AGI, but during this negotiation, you‚Äôve shown us that absolute control is extremely important to you. The goal of OpenAI is to make the future good and avoid an AGI dictatorship. You are concerned that Demis could create an AGI dictatorship. So do we. Therefore, it‚Äôs a bad idea to create a structure where you could become a dictator, especially when we can create a structure that avoids this possibility.‚Äù</p>
  </li>
  <li>
    <p>To Sam: ‚ÄúWe don‚Äôt understand why the CEO title is so important to you. Your stated reasons have changed, and it‚Äôs hard to understand what‚Äôs driving this. Is AGI truly your primary motivation? How does it connect to your political goals? How has your thought process changed over time?‚Äù</p>
  </li>
</ul>

<p>Elon replied:</p>
<ul>
  <li>‚ÄúGuys, I‚Äôve had enough. This is the final straw. Either go do something on your own or continue with OpenAI as a nonprofit. I will no longer fund OpenAI until you have made a firm commitment to stay, or I‚Äôm just being a fool who is essentially providing free funding for you to create a startup. Discussions are over.‚Äù</li>
</ul>

<hr />

<p><strong><em>Chapter 4: The finale</em></strong></p>

<p>The final email exchanges between Elon and Sam occurred around March 2019. At this time, Sam, now CEO of OpenAI, drafted a plan:</p>

<ul>
  <li>‚ÄúWe‚Äôve created the capped-profit company and raised the first round. We did this in a way where all investors are clear that they should never expect a profit.</li>
  <li>We made Greg chairman and me CEO of the new entity.</li>
  <li>Speaking of the last point, we are now discussing a multi-billion dollar investment, which I would like your advice on when you have time.‚Äù</li>
</ul>

<p>Elon replied, once again making it clear that he had no interest in OpenAI becoming a for-profit company.</p>

<hr />

<h2 id="improving-chatgpts-interpretability-with-cross-modal-heatmap">Improving ChatGPT‚Äôs interpretability with cross-modal heatmap</h2>

<p>(2024-11)</p>

<p>I tried a simple experiment‚Äîtook a snapshot of a single cell in a Sudoku puzzle (a 3x3 grid with digits 1 to 9) and asked ChatGPT to find the location of a specific number in the grid.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2024-11-18/sudoku-question-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2024-11-18/sudoku-question-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2024-11-18/sudoku-question-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/2024-11-18/sudoku-question.png" class="img-fluid rounded z-depth-1" width="300" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Sudoku question
</div>

<p>As shown in the picture, ChatGPT seemed to handle the question just fine! But as soon as I upped the challenge level, it started to show its infamous hallucination problem :D</p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2024-11-18/sudoku-chatgpt-answer-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2024-11-18/sudoku-chatgpt-answer-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2024-11-18/sudoku-chatgpt-answer-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/2024-11-18/sudoku-chatgpt-answer.png" class="img-fluid rounded z-depth-1" width="300" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    Failed answer
</div>

<p>So, how can we improve this?</p>

<p>One idea: applying techniques like <a href="https://github.com/castorini/daam">DAAM</a> to create a cross-modal heatmap (example attached) could help provide a rough idea of where each visual-text pair is mapped. By using this data to fine-tune the model, could we boost its interpretability?</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.licdn.com/dms/image/v2/D5622AQGFHx5WfAVXVg/feedshare-shrink_1280/feedshare-shrink_1280/0/1730434983661?e=1734566400&amp;v=beta&amp;t=em_hOf6h30DtmilPv3_LzrrlGMA90l4NXLB1Kwul1Qk-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.licdn.com/dms/image/v2/D5622AQGFHx5WfAVXVg/feedshare-shrink_1280/feedshare-shrink_1280/0/1730434983661?e=1734566400&amp;v=beta&amp;t=em_hOf6h30DtmilPv3_LzrrlGMA90l4NXLB1Kwul1Qk-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.licdn.com/dms/image/v2/D5622AQGFHx5WfAVXVg/feedshare-shrink_1280/feedshare-shrink_1280/0/1730434983661?e=1734566400&amp;v=beta&amp;t=em_hOf6h30DtmilPv3_LzrrlGMA90l4NXLB1Kwul1Qk-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.licdn.com/dms/image/v2/D5622AQGFHx5WfAVXVg/feedshare-shrink_1280/feedshare-shrink_1280/0/1730434983661?e=1734566400&amp;v=beta&amp;t=em_hOf6h30DtmilPv3_LzrrlGMA90l4NXLB1Kwul1Qk" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    DAAM example
</div>

<p>Update: It‚Äôs my mistake for not instructing ChatGPT properly :D</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0 text-center">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.licdn.com/dms/image/v2/D562CAQGE7lw9jW2oqg/comment-image-shrink_8192_1280/comment-image-shrink_8192_1280/0/1730446203816?e=1732489200&amp;v=beta&amp;t=ARa8dqrE5VvConuxvT_g9XjYB6rOJbg8jak5AQW1Mq8-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.licdn.com/dms/image/v2/D562CAQGE7lw9jW2oqg/comment-image-shrink_8192_1280/comment-image-shrink_8192_1280/0/1730446203816?e=1732489200&amp;v=beta&amp;t=ARa8dqrE5VvConuxvT_g9XjYB6rOJbg8jak5AQW1Mq8-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.licdn.com/dms/image/v2/D562CAQGE7lw9jW2oqg/comment-image-shrink_8192_1280/comment-image-shrink_8192_1280/0/1730446203816?e=1732489200&amp;v=beta&amp;t=ARa8dqrE5VvConuxvT_g9XjYB6rOJbg8jak5AQW1Mq8-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.licdn.com/dms/image/v2/D562CAQGE7lw9jW2oqg/comment-image-shrink_8192_1280/comment-image-shrink_8192_1280/0/1730446203816?e=1732489200&amp;v=beta&amp;t=ARa8dqrE5VvConuxvT_g9XjYB6rOJbg8jak5AQW1Mq8" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption text-center">
    ChatGPT's correct answer with proper instruction
</div>

<h2 id="the-prisoners-dilemma">The Prisoner‚Äôs Dilemma</h2>

<p>(2024-09)</p>

<p>Imagine a game between two players, A and B, competing for a prize of 1 million dollars from a bank. They are asked to choose either ‚ÄúSplit‚Äù or ‚ÄúTake All‚Äù the prize. If both choose ‚ÄúSplit,‚Äù they each receive $500,000. If one chooses ‚ÄúSplit‚Äù and the other chooses ‚ÄúTake All,‚Äù the one who chooses ‚ÄúTake All‚Äù wins the entire prize. If both choose ‚ÄúTake All,‚Äù they both lose and get nothing. They can‚Äôt communicate with each other and must decide whether to trust/cooperate.</p>

<p>This is the Prisoner‚Äôs Dilemma, one of the most famous problems in Game Theory. In this scenario, when the game is played only once, the best strategy for each person is not to cooperate. However, in real life, many situations are not zero-sum games, where only one can win. Instead, all parties can win and benefit from a shared bank, our world.</p>

<p>And the best strategy to win in life is to cooperate with others, or as summarized in the video: be nice and forgiving, but don‚Äôt be a pushover or too nice so others can take advantage of you.</p>

<div class="text-center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/mScpHTIi-kM?si=HE_ypfH1FhfGBSJN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</div>

<h2 id="a-new-perspective-on-the-motivation-of-vae">A new perspective on the motivation of VAE</h2>

<p>(2023-09)</p>

<ul>
  <li>Assume that \(x\) was generated from \(z\) through a generative process \(p(x \mid z)\).</li>
  <li>Before observing \(x\), we have a prior belief about \(z\), i.e., \(z\) can be sampled from a Gaussian distribution \(p(z) = \mathcal{N}(0, I)\).</li>
  <li>After observing \(x\), we want to correct our prior belief about \(z\) to a posterior belief \(p(z \mid x)\).</li>
  <li>However, we cannot directly compute \(p(z \mid x)\) because it is intractable. Therefore, we use a variational distribution \(q(z \mid x)\) to approximate \(p(z \mid x)\). The variational distribution \(q(z \mid x)\) is parameterized by an encoder \(e(z \mid x)\). The encoder \(e(z \mid x)\) is trained to minimize the KL divergence between \(q(z \mid x)\) and \(p(z \mid x)\). This is the motivation of VAE.</li>
</ul>

<p>Mathematically, we want to minimize the KL divergence between \(q_{\theta} (z \mid x)\) and \(p(z \mid x)\):</p>

\[\mathcal{D}_{KL} (q_{\theta} (z \mid x) \parallel p(z \mid x) ) = \mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log \frac{q_{\theta} (z \mid x)}{p(z \mid x)} \right] = \mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log q_{\theta} (z \mid x) - \log p(z \mid x) \right]\]

<p>Applying Bayes rule, we have:</p>

\[\mathcal{D}_{KL} (q_{\theta} (z \mid x) \parallel p(z \mid x) ) = \mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log q_{\theta} (z \mid x) - \log p(x \mid z) - \log p(z) + \log p(x) \right]\]

\[\mathcal{D}_{KL} (q_{\theta} (z \mid x) \parallel p(z \mid x) ) = \mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log q_{\theta} (z \mid x) - \log p(x \mid z) - \log p(z) \right] + \log p(x)\]

\[\mathcal{D}_{KL} (q_{\theta} (z \mid x) \parallel p(z \mid x) ) = - \mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log p(x \mid z) \right] + \mathcal{D}_{KL} \left[ q_{\theta} (z \mid x) \parallel p(z) \right] + \log p(x)\]

<p>So, minimizing \(\mathcal{D}_{KL} (q_{\theta} (z \mid x) \parallel p(z \mid x) )\) is equivalent to maximizing the ELBO: \(\mathbb{E}_{q_{\theta} (z \mid x)} \left[ \log p(x \mid z) \right] - \mathcal{D}_{KL} \left[ q_{\theta} (z \mid x) \parallel p(z) \right]\).</p>

<p>Another perspective on the motivation of VAE can be seen from the development of the Auto Encoder (AE) model.</p>

<ul>
  <li>The AE model is trained to minimize the reconstruction error between the input \(x\) and the output \(\hat{x}\).</li>
  <li>The AE process is deterministic, i.e., given \(x\), the output \(\hat{x}\) is always the same.</li>
  <li>Therefore, the AE model does not have contiguity and completeness properties as desired in a generative model.</li>
  <li>To solve this problem, we change the deterministic encoder of the AE model to a stochastic encoder, i.e., instead of mapping \(x\) to a single point \(z\), the encoder maps \(x\) to a distribution \(q_{\theta} (z \mid x)\). This distribution should be close to the prior distribution \(p(z)\). This is the motivation of VAE.</li>
</ul>

<h2 id="data-free-knowledge-distillation">Data-Free Knowledge Distillation</h2>

<p>(2023-08)</p>

<ul>
  <li>Reference: <a href="https://arxiv.org/abs/2011.14779">Data-Free Model Extraction</a></li>
  <li>What is Data-Free KD? It is a method to transfer knowledge from a teacher model to a student model without using any data. The idea is learn a generator that can generate synthetic data that is similar to the data from the teacher model. Then, we can use the synthetic data to train the student model.
\(L_S = L_{KL} (T(\hat{x}), S(\hat{x}))\)</li>
</ul>

<p>Where \(T(\hat{x})\) is the teacher model and \(S(\hat{x})\) is the student model. \(\hat{x}\) is the synthetic data generated by generator \(G\).</p>

\[L_G = L_{CE} (T(\hat{x}), y) - L_{KL} (T(\hat{x}), S(\hat{x}))\]

<p>Where \(y\) is the label of the synthetic data. Minimizing first term encourages the generator generate data that fall into the target class \(y\), while maximizing the second term encourages the generator generate diverse data? 
Compared to GAN, we can think both teacher and student models are acted as discriminators.</p>

<p>This adversarial game need to intergrate to the training process in each iteration. For example, after each iteration, you need to minimizing \(L_G\) to generate a new synthetic data. And then using \(\hat{x}\) to train the student. This is to ensure that the synthetic data is new to the student model.
Therefore, one of the drawbacks of DFKD is that it is very slow.</p>

<p>Tuan (Henry)‚Äô work on improving Data-Free KD:</p>

<ul>
  <li>Introducing noisy layer which is a linear layer that transforms the input (label-text embedding vector from CLIP) before feeding to the generator as previous work. (Input -&gt; Noisy Layer -&gt; Generator -&gt; Teacher/Student -&gt; \(L_G\)).</li>
  <li>One important point is that the Noisy layer need to reset its weight every time we generate a new batch of synthetic data (while fixing the generator). This is to ensure the diversity of the synthetic data.</li>
  <li>One interesting finding is that the noisy layer can be applied to all kinds of label-text embedding from different classes, while if using individual noise layers for each class, the performance is worse.</li>
</ul>

<h2 id="how-to-disable-nsfw-detection-in-huggingface">How to disable NSFW detection in Huggingface</h2>

<p>(2023-08)</p>

<ul>
  <li>context: I am trying to generate inappropriate images using Stable Diffusion with prompts from the I2P benchmark. However, the NSFW detection in Huggingface is too sensitive and it filters out all of the images, and return a black image instead. Therefore, I need to disable it.</li>
  <li>solution: modify the pipeline_stable_diffusion.py file in the Huggingface library. just return image and None in the run_safety_checker function.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># line 426 in the pipeline_stable_diffusion.py
</span><span class="k">def</span> <span class="nf">run_safety_checker</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">image</span><span class="p">,</span> <span class="bp">None</span>

    <span class="c1"># The following original code will be ignored
</span>    <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">safety_checker</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">has_nsfw_concept</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="nf">is_tensor</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
            <span class="n">feature_extractor_input</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">image_processor</span><span class="p">.</span><span class="nf">postprocess</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">output_type</span><span class="o">=</span><span class="sh">"</span><span class="s">pil</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">feature_extractor_input</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">image_processor</span><span class="p">.</span><span class="nf">numpy_to_pil</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">safety_checker_input</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">feature_extractor</span><span class="p">(</span><span class="n">feature_extractor_input</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
        <span class="n">image</span><span class="p">,</span> <span class="n">has_nsfw_concept</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">safety_checker</span><span class="p">(</span>
            <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">clip_input</span><span class="o">=</span><span class="n">safety_checker_input</span><span class="p">.</span><span class="n">pixel_values</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">dtype</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">image</span><span class="p">,</span> <span class="n">has_nsfw_concept</span>
</code></pre></div></div>

<p>(#Idea, #GenAI, #TML) Completely erase a concept (i.e., NSFW) from latent space of Stable Diffusion.</p>

<ul>
  <li>Problem: Current methods such as ESD (Erasing Concepts from Diffusion Models) can erase quite well a concept from the Stable Diffusion. However, recent work (Circumventing Concept Erasure Methods for Text-to-Image Generative Models) has shown that it is possible to recover the erased concept by using a simple Textual Inversion method.</li>
  <li>Firstly, personally, I think that the approach in Pham et al. (2023) is not very convincing. Because, they need to use additional data (25 samples/concept) to learn a new token associated with the removed concept. So, it is not surprising that they can generate images with the removed concept. It is becaused of the power of the personalized method, not because of the weakness of the ESD method. It would be better if we can compare performance on recovering concept A (concept A is totally new to the base Stable Diffusion model such as your personal images) on two models: a SD model injected with concept A and a model fine-tuned with concept A and then erased concept A and then injected concept A back. If the latter model can not generate images with concept A better than inject concept A directly to the base model, then we can say that the ESD method is effective.</li>
</ul>

<h2 id="helmholtz-visiting-researcher-grant">Helmholtz Visiting Researcher Grant</h2>

<p>(2023-08)</p>

<ul>
  <li>https://www.helmholtz-hida.de/en/new-horizons/hida-visiting-program/</li>
  <li>1-3 months visiting grant for Ph.D. students and postdocs in one of 18 Helmholtz centers in Germany.</li>
  <li>Deadline: 16 August 2023 and will end on 15 October 2023.</li>
  <li>CISPA - Helmholtz Center for Information Security https://cispa.de/en/people</li>
</ul>

<h2 id="where-to-find-potential-collaborators-or-postdoc-positions">Where to find potential collaborators or postdoc positions</h2>

<p>(2023-08)</p>

<p>Each year, the Australian Research Council releases the outcomes of funded/accepted projects from leading researchers and professors across Australian Universities. This information can be a great resource for finding collaborations, PhD positions, and research job opportunities.</p>

<p>For example, if you‚Äôre interested in the topic of Trust and Safety in Machine Learning, you can find several professors who have recently received funding to work on related topics.</p>

<p>Link to the ARC data: <a href="https://lnkd.in/gge2FJR3">https://lnkd.in/gge2FJR3</a></p>

<h2 id="micromouse-competition">Micromouse Competition</h2>

<p>(2023-07)</p>

<ul>
  <li>First introduced by Claude Shannon in 1950s.</li>
  <li>At the begining, it was just a simple maze solving competition. However, after 50 years of growing and competing, it has become a very competitive competition with many different categories: speed, efficiency, size. And along with its, many great ideas have been introduced and applied to the competition. It involes many different fields: mechanical, electrical, software, and AI all in just a small robot.</li>
  <li>The Fosbury Flop in high jump. When everyone use the same jump technique, the performance becomes saturated. Then Fosbury introduced a new technique (backward flop) that no one had ever thought of before. And it became the new standard (even named after him). This phenomenon also happens in the Micromouse competition.</li>
  <li>The two most important game changing ideas in the history of micromouse competition: capability to diagonal movement and using fan (vacumn) to suck the mouse to the path so that the mouse can move faster as in a racing car.</li>
</ul>

<p>Reference:</p>

<ul>
  <li><a href="https://youtu.be/ZMQbHMgK2rw">The Fastest Maze-Solving Competition On Earth by Veritasium.</a></li>
  <li><a href="https://invention.si.edu/fosbury-flop-game-changing-technique">The Fosbury Flop‚ÄîA Game-Changing Technique</a></li>
</ul>]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[OpenAI email archives from Musk v Altman - Game of Thrones]]></summary></entry><entry><title type="html">Common Coding Interview Questions</title><link href="http://localhost:4000/blog/2024/project_coding_interview/" rel="alternate" type="text/html" title="Common Coding Interview Questions" /><published>2024-11-14T00:00:00-08:00</published><updated>2024-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/project_coding_interview</id><content type="html" xml:base="http://localhost:4000/blog/2024/project_coding_interview/"><![CDATA[<h2 id="top-20-interview-questions">Top 20 Interview Questions</h2>

<p><a href="https://content.techgig.com/hiring/20-most-frequently-asked-programming-interview-questions/articleshow/74608663.cms">20 Most Frequently Asked Programming Interview Questions</a></p>

<p><strong>How is a bubble sort algorithm implemented?</strong></p>

<p><strong>How to print the first non-repeated character from a string?</strong></p>

<p><strong>How to find the first non repeated character of a given String?</strong></p>

<p><strong>How do you find duplicate numbers in an array if it contains multiple duplicates?</strong></p>

<p><strong>How do you remove duplicates from an array in place?</strong></p>

<p><strong>How are duplicates removed from an array without using any library?</strong></p>

<p><strong>How do you find the middle element of a singly linked list in one pass?</strong></p>

<p><strong>How do you check if a given linked list contains a cycle? How will you find initial node of the cycle?</strong></p>

<ul>
  <li>Reference: <a href="https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/">https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/</a></li>
</ul>

<p><strong>How do you reverse a singly linked list without recursion?</strong></p>

<p><strong>How is a binary search tree implemented?</strong></p>

<p>A binary search tree (BST) is a node-based binary tree data structure which has the following properties:</p>
<ul>
  <li>The left subtree of a node contains only nodes with keys lesser than the node‚Äôs key.</li>
  <li>The right subtree of a node contains only nodes with keys greater than the node‚Äôs key.</li>
  <li>The left and right subtree each must also be a binary search tree.</li>
</ul>

<p><strong>How do you traverse a given binary tree in preorder without recursion?</strong></p>

<p><strong>How do you print all nodes of a given binary tree using inorder traversal without recursion?</strong></p>

<p><strong>How is a merge sort algorithm implemented?</strong></p>

<p><strong>How is a radix sort algorithm implemented?</strong></p>

<ul>
  <li>Radix sort is a non-comparative sorting algorithm that sorts data with integer keys by grouping the keys into buckets.</li>
  <li>Reference: <a href="https://www.geeksforgeeks.org/radix-sort/">https://www.geeksforgeeks.org/radix-sort/</a></li>
</ul>

<p><strong>How do you swap two numbers without using the third variable?</strong></p>

<p>In Python, we can swap two numbers without using the third variable by using a tuple assignment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
</code></pre></div></div>

<p><strong>How do you design a vending machine?</strong></p>

<p><strong>Write a program to find prime factors of an integer?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">prime_factors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">factors</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">factors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">//=</span> <span class="mi">2</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mf">0.5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">factors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">n</span> <span class="o">//=</span> <span class="n">i</span>
    <span class="k">return</span> <span class="n">factors</span>
</code></pre></div></div>

<p><strong>What is Depth First Search Algorithm for a binary tree?</strong></p>

<ul>
  <li>DFS is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
    <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Difference between a stable and unstable sorting algorithm?</strong></p>

<ul>
  <li>Stability is mainly essential when we have key-value pairs with duplicate keys possible (like people‚Äôs names as keys and their details as values). And we wish to sort these objects by keys.</li>
  <li>A sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input data set</li>
</ul>

<p><strong>What is the difference between Comparison and Non-Comparison Sorting Algorithms?</strong></p>

<ul>
  <li>Comparison sorting algorithms sort data by comparing the values in the data set to each other. The most common comparison sorting algorithms include bubble sort, insertion sort, selection sort, merge sort, quick sort, heap sort.</li>
  <li>Non-comparison sorting algorithms sort data without comparing the values in the data set to each other. Instead, they use specific properties of the data to sort it. The most common non-comparison sorting algorithms include counting sort, radix sort, and bucket sort.</li>
</ul>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Not something fancy]]></summary></entry><entry><title type="html">75 Leetcode Questions on Tree</title><link href="http://localhost:4000/blog/2024/project_75_leetcode_questions_tree/" rel="alternate" type="text/html" title="75 Leetcode Questions on Tree" /><published>2024-11-14T00:00:00-08:00</published><updated>2024-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/project_75_leetcode_questions_tree</id><content type="html" xml:base="http://localhost:4000/blog/2024/project_75_leetcode_questions_tree/"><![CDATA[<p>In this project, I will try to solve 75 Leetcode questions as listed in this <a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU">link</a>.</p>

<h2 id="104-maximum-depth-of-binary-tree"><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/">104. Maximum Depth of Binary Tree</a></h2>

<font size="6"> Description </font>

<p>Given the root of a binary tree, return its maximum depth.</p>

<p>A binary tree‚Äôs maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,9,20,null,null,15,7]
Output: 3
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,null,2]
Output: 2
</code></pre></div></div>

<font size="6"> Solution </font>

<p>The solution is quite simple. We just need to traverse the tree and count the depth. The depth of a node is the maximum depth of its children plus one. The depth of a leaf node is 1.</p>

<p>In this solution, I use DFS to traverse the tree. The time complexity is O(n) and the space complexity is O(n) (in the worst case, the tree is a linked list).</p>

<blockquote class="block-warning">
  <p><strong>What is DFS?</strong></p>

  <p>DFS stands for Depth First Search. It is a graph traversal algorithm. The idea is to traverse the graph by going as deep as possible, and backtrack when we cannot go further. The DFS algorithm can be implemented using recursion or stack.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxDepth</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">depth</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<font size="6"> Complexity Analysis </font>

<ul>
  <li>Time complexity: O(n) because we need to traverse all the nodes in the tree once.</li>
  <li>Space complexity: O(n) because we need to store the depth of each node in the stack.</li>
  <li>Hidden space complexity: O(h) where h is the height of the tree. This is the space complexity of the recursion stack.</li>
</ul>

<h2 id="100-same-tree"><a href="https://leetcode.com/problems/same-tree/">100. Same Tree</a></h2>

<font size="6"> Description </font>

<p>Given the roots of two binary trees p and q, write a function to check if they are the same or not.</p>

<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: p = [1,2,3], q = [1,2,3]
Output: true
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: p = [1,2], q = [1,null,2]
Output: false
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: p = [1,2,1], q = [1,1,2]
Output: false
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in both trees is in the range [0, 100].</li>
  <li>-10^4 &lt;= Node.val &lt;= 10^4</li>
</ul>

<font size="6"> Solution </font>

<p>The naive idea that comes to my mind is to traverse the two trees simultaneously and compare the value of each node.
But how to traverse the two trees simultaneously. So I use the DFS algorithm to traverse the two trees separately and store the values of the nodes in two lists. Then I compare the two lists.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSameTree</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">q</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">values</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">values</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                <span class="nf">extract</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
                <span class="nf">extract</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
        
        <span class="n">values_p</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">values_q</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nf">extract</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">values_p</span><span class="p">)</span>
        <span class="nf">extract</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">values_q</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">values_p</span> <span class="o">==</span> <span class="n">values_q</span>
</code></pre></div></div>

<font size="6"> Complexity Analysis </font>

<ul>
  <li>Time complexity: O(n) because we need to traverse all the nodes in the tree once.</li>
  <li>Space complexity: O(n) because we need to store the values of all the nodes in the tree. More precisely, O(4n) because we need to store the values of two trees in two lists.</li>
</ul>

<h2 id="226-invert-binary-tree">226. <a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree</a></h2>

<font size="6"> Description </font>

<p>Given the root of a binary tree, invert the tree, and return its root.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [2,1,3]
Output: [2,3,1]
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = []
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [0, 100].</li>
  <li>-100 &lt;= Node.val &lt;= 100</li>
</ul>

<font size="6"> Solution </font>

<p>Each <code class="language-plaintext highlighter-rouge">TreeNode</code> in the binary tree is defined as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>
</code></pre></div></div>

<p>It contains three attributes: <code class="language-plaintext highlighter-rouge">val</code>, <code class="language-plaintext highlighter-rouge">left</code>, and <code class="language-plaintext highlighter-rouge">right</code>. The <code class="language-plaintext highlighter-rouge">val</code> attribute stores the value of the node. The <code class="language-plaintext highlighter-rouge">left</code> and <code class="language-plaintext highlighter-rouge">right</code> attributes store the left and right children of the node, respectively. If the node does not have a left or right child, the corresponding attribute is <code class="language-plaintext highlighter-rouge">None</code>.
A node without children is called a leaf node. A binary tree is a tree in which each node has at most two children.</p>

<p>The idea of the solution is to traverse the tree and swap the left and right children of each node but keep the value of the node unchanged.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">invertTree</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">]:</span>
        <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span>
                <span class="nf">swap</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                <span class="nf">swap</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        
        <span class="nf">swap</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>if the node is None, return None which is the base case of the recursion.</li>
  <li>if the node is not None, swap the left and right children of the node, then recursively swap the left and right children of the left and right children of the node.</li>
  <li>It is interesting that we can swap the left and right children of the node without temporary variables. This is because Python allows us to assign multiple variables at the same time. For example, <code class="language-plaintext highlighter-rouge">a, b = b, a</code> will swap the values of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. This is called tuple unpacking, which is an in-place operation.</li>
  <li>The important step is to recursive step when we call <code class="language-plaintext highlighter-rouge">swap(node.left)</code> and <code class="language-plaintext highlighter-rouge">swap(node.right)</code> to swap the children of the left and right children of the node.</li>
  <li>Because the root node is unchanged, we can return the root node as the output of the function.</li>
</ul>

<blockquote class="block-warning">
  <p><strong>What is in-place operation?</strong></p>

  <p>An in-place operation is an operation that changes the input directly without making a copy. For example, the swap operation <code class="language-plaintext highlighter-rouge">a, b = b, a</code> is an in-place operation because it does not require extra memory to store the result. The operation <code class="language-plaintext highlighter-rouge">a += b</code> is also an in-place operation because it changes the value of <code class="language-plaintext highlighter-rouge">a</code> directly.</p>
</blockquote>

<h2 id="124-binary-tree-maximum-path-sum"><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/">124. Binary Tree Maximum Path Sum</a></h2>

<font size="6"> Description </font>

<p>A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.</p>

<p>The path sum of a path is the sum of the node‚Äôs values in the path.</p>

<p>Given the root of a binary tree, return the maximum path sum of any non-empty path.</p>

<!-- **Clarification**:

- What is non-empty path? It means that the path must contain at least one node.
- Is the path with only one node a valid path? Yes, it is. -->

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,-2,3]
Output: 4
Explanation: The optimal path is 3 -&gt; 1 with a path sum of 3 + 1 = 4.
</code></pre></div></div>

<p>Example 4:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [-2,1,3]
Output: 3
Explanation: The optimal path is just the node 3 with a path sum of 3.
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [1, 3 * 10^4].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
</ul>

<font size="6"> Solution </font>

<p>This is a hard-level question that I couldn‚Äôt think of a solution at first. Therefore, I tried to explain my thought process as follows with an expectation that I can come up with a solution along the way. Fortunately, it works :smile: (with the big help of Github Copilot)</p>

<p>Firstly, we need to clarify the problem.</p>

<ul>
  <li>What is non-empty path? It means that the path must contain at least one node.</li>
  <li>Is the path with only one node a valid path? Yes, it is.</li>
</ul>

<p>So the path can be a sub-tree but every node has atmost one child except the root node which can have two children. The path can also be a single node. The path sum is the sum of all nodes in the sub-tree.
However, with this perspective, it is still not clear how to find the optimal sub-tree. Grid search is not a good idea because the number of sub-trees is exponential with respect to the number of nodes in the tree.</p>

<p>Let‚Äôs think in the style of a dynamic programming problem. We can define the sub-problem as follows:</p>

<blockquote>
  <p>Given a path and an adjacent node (the node that is connected to the first or the last node in the path), should we add the adjacent node to the path or not?</p>
</blockquote>

<p>There are two scenarios to be considered:</p>

<ul>
  <li>If the node has a positive value.</li>
  <li>If the node has a negative value but its children have positive values and greater than the absolute value of the node.</li>
</ul>

<p>The first scenario is quite straightforward that it is always better to add the adjacent node to the path. The second scenario is a bit tricky because what if adding it and its children to the path does not benefit the path sum but adding it, its children, and its grandchildren to the path does. In this case, adding the node to the path is a good deal because it will benefit the path sum in the future.</p>

<p>Based on the above analysis, we can think about more general scenarios as follows:</p>

<ul>
  <li>If the node has a positive value, add it to the path.</li>
  <li>If the node has a negative value, but the sub-path starting from its children has a positive value and greater than the absolute value of the node, add it to the path.</li>
</ul>

<p>However, this is still not clear enough to get a deployable solution. But the thought process makes me realize an important observation that ‚Äúeach node has its left child‚Äôs optimal path sum and right child‚Äôs optimal path sum‚Äù. The previous approach is left-to-right scanning manner, when we try to add an adjacent node of the left (or right) of the path to the path. What if we consider a ‚ÄúMiddle-Out‚Äù approach as</p>

<blockquote>
  <p>Given a node, what is the optimal path sum of the sub-tree rooted at the node? In other words, should we connect the node to its left child, right child, or both?</p>
</blockquote>

<p>With this approach, we can define the optimal path sum of the sub-tree rooted at the node as follows:</p>

<ul>
  <li>The value of the node.</li>
  <li>The value of the node plus the optimal path sum of its left child.</li>
  <li>The value of the node plus the optimal path sum of its right child.</li>
</ul>

<p>Finally, we can write the code as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxPathSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                <span class="n">right</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_sum</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">left</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">right</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">left</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="o">-</span><span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">max_sum</span>
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>The base case of the recursion is when the node is None, we return 0. It is worth noting that we return 0 instead of None as in previous problems.</li>
  <li>If the node is not None we then recursively call the function on its left and right children to get the optimal path sum of the sub-trees rooted at the left and right children of the node.</li>
  <li>Then the optimal path sum rooted at the node is the maximum of <code class="language-plaintext highlighter-rouge">node.val</code> and <code class="language-plaintext highlighter-rouge">node.val + left</code> and <code class="language-plaintext highlighter-rouge">node.val + right</code>. It is worth noting that we must not consider the value <code class="language-plaintext highlighter-rouge">node.val + left + right</code> even though it might be the maximum. It is because if we consider this value, we will recursively consider a sub-tree in the node‚Äôs children as a valid path, which is not correct.</li>
</ul>

<h2 id="102-binary-tree-level-order-traversal"><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">102. Binary Tree Level Order Traversal</a></h2>

<font size="6"> Description </font>

<p>Given the root of a binary tree, return the level order traversal of its nodes‚Äô values. (i.e., from left to right, level by level).</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1]
Output: [[1]]
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = []
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [0, 2000].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
</ul>

<font size="6"> Solution </font>

<blockquote class="block-warning">
  <p><strong>What is level order traversal?</strong></p>

  <p>The level order traversal of a binary tree is a traversal that visits the nodes level by level.</p>
</blockquote>

<p>The idea of the solution is to traverse the tree and store the nodes in a list of lists. The first list contains the nodes at level 0, the second list contains the nodes at level 1, and so on. Instead of using DFS, we use BFS to traverse the tree.</p>

<blockquote class="block-warning">
  <p><strong>What is BFS?</strong></p>

  <p>BFS stands for Breadth First Search. It is a graph traversal algorithm. The idea is to traverse the graph by going level by level. The BFS algorithm can be implemented using a queue.</p>
</blockquote>

<p>The following code snippet shows how to implement a queue using a list. The queue is a data structure that supports two operations: enqueue and dequeue. The enqueue operation adds an item to the queue. The dequeue operation removes an item from the queue. The first item that is added to the queue is the first item that is removed from the queue. This is called First In First Out (FIFO).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Simple implementation of a queue using a list
</span><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div></div>

<!-- The following code snippet shows how to implement the BFS algorithm to traverse the tree.

```python
# Simple BFS implementation
def bfs(root):
    queue = Queue()
    queue.enqueue(root)
    while not queue.is_empty():
        node = queue.dequeue()
        print(node.val)
        if node.left is not None:
            queue.enqueue(node.left)
        if node.right is not None:
            queue.enqueue(node.right)
``` -->

<p>Here is the solution to the problem.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">levelOrder</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="n">levels</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">queue</span><span class="p">.</span><span class="nf">is_empty</span><span class="p">():</span>
                <span class="n">level</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">items</span><span class="p">)):</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                    <span class="n">level</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
                <span class="n">levels</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">levels</span>
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>The base case is when the root is None, we return an empty list.</li>
  <li>If the root is not None, we then create a queue and enqueue the root to the queue.</li>
  <li>In each level, we iteratively dequeue all the nodes in the queue and append their values to the level list. Then we enqueue the left and right children of the nodes to the queue. The size of the queue is the number of nodes in the current level. The for loop iterates over the nodes in the current level. It is worth noting that we must not use <code class="language-plaintext highlighter-rouge">for node in queue.items</code> because the size of the queue changes when we enqueue the left and right children of the nodes. Instead, we use <code class="language-plaintext highlighter-rouge">for _ in range(len(queue.items))</code> which iterates over the exact number of nodes in the current level.</li>
  <li>The algorithm terminates when the queue is empty. Then we return the levels list.</li>
</ul>

<h2 id="297-serialize-and-deserialize-binary-tree"><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/">297. Serialize and Deserialize Binary Tree</a></h2>

<font size="6"> Description </font>

<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>

<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>

<p>Clarification: The input/output format is the same as <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = []
Output: []
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1]
Output: [1]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [0, 10^4].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
</ul>

<font size="6"> Solution </font>

<p>The idea of the solution is to traverse the tree and store the nodes in a list and then reconstruct the tree from the list in the deserializer. I will use both DFS and BFS in the solution.</p>

<p><strong>Reflection</strong>: After solving this problem with BFS (level order traversal) I realized that BFS is a more intuitive approach to traverse the tree because it is level by level, which might be more matched with my intuition (personally), moreover, in the problem‚Äôs description, the input is also in the level order format which triggers me to think about BFS first. However the DFS is a more suitable approach to serialize the tree because it is easier to reconstruct the tree from the list of nodes in the DFS order. In the BFS order, we need to keep track of the parent nodes with a queue to reconstruct the tree.</p>

<p><strong>Solution with BFS</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
</span>
<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">levels</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">queue</span><span class="p">.</span><span class="nf">is_empty</span><span class="p">():</span>
            <span class="n">level</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">items</span><span class="p">)):</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">level</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">level</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
            <span class="n">levels</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">levels</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">root</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">level</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
                <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">level</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">parent_child</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                        <span class="n">parent_child</span> <span class="o">=</span> <span class="bp">None</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">current_node</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
                        <span class="n">parent_child</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                        <span class="n">parent_child</span> <span class="o">=</span> <span class="n">current_node</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">current_node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">current_node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">root</span>
        

<span class="c1"># Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
</span></code></pre></div></div>

<p>Explanation:</p>

<p>In the serializer, it is the BFS algorithm that is similar to the previous problem. So this explanation is mostly for the deserializer. Let‚Äôs consider the following example:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
Encoded: [[1], [2, 3], [None, None, 4, 5]]
</code></pre></div></div>

<p>Let‚Äôs go through the deserializer step by step.</p>

<ul>
  <li>The base case is when the data is an empty list, we return None.</li>
  <li>If the data is not an empty list, we then create a root node with the value of the first element in the first level of the data list. The data always starts with the root node.</li>
  <li><del>Because it is a binary tree, therefore, each node always have two children (None is also considered as a child) except the leaf nodes. Therefore, it is safe to assume that the length of the data list is: <code class="language-plaintext highlighter-rouge">2^0 + 2^1 + 2^2 + ... + 2^(n-1) = 2^n - 1</code> where <code class="language-plaintext highlighter-rouge">n</code> is the number of levels in the tree. The first level has 1 node, the second level has 2 nodes, the third level has 4 nodes, and so on. In the example, the length of the data list is 7 which is equal to <code class="language-plaintext highlighter-rouge">2^3 - 1</code> where <code class="language-plaintext highlighter-rouge">n = 3</code></del>.</li>
  <li>Revised: The above observation is incorrect :smile:. For example, the input <code class="language-plaintext highlighter-rouge">[1,2,null,3,null,4,null,5]</code> is the left-skewed tree with 5 nodes, with level 0 has 1 node (root), level 1 has 2 node (2 and null), level 3 has 2 node (3 and null, which are children of node 2) and so on.</li>
  <li>After creating the root node, we then create a queue to manage which node we are adding the children to. We start by enqueueing the root‚Äôs left and right children to the queue. So after this step, we have a tree - to be built - with only the root node and a queue - to manage the parent nodes - with two children of the root node.</li>
  <li>Then we iterate over the data list from the second level to the last level. In each level, we iterate over the nodes in the level. We have the following actions:
    <ul>
      <li>We create a TreeNode with the value of the current node in the data list. If the value is None, we still create a TreeNode with the value of None.</li>
      <li>We dequeue the parent‚Äôs children from the queue. It can be the left or right child of the parent node</li>
      <li>We assign the current node to the the dequeued child. If the value of the current node is None, we assign None to the child.</li>
      <li>We enqueue the left and right children of the current node to the queue. If the value of the current node is None, we enqueue two None values instead.</li>
    </ul>
  </li>
</ul>

<!-- 
Let's go through the example step by step.

```markdown
Input: root = [1,2,3,null,null,4,5]
Encoded: [[1], [2, 3], [None, None, 4, 5]]
Iter 1: tree = [1], queue = [1's left child, 1's right child]
Iter 2: node = 2, deque 1's left child, assign 2 to 1's left child, enqueue 2's left and right children. tree = [1, 2], queue = [1's right child, 2's left child, 2's right child]
Iter 3: node = 3, deque 1's right child, assign 3 to 1's right child, enqueue 3's left and right children. tree = [1, 2, 3], queue = [2's left child, 2's right child, 3's left child, 3's right child]
Iter 4: node = None, deque 2's left child, assign None to 2's left child, enqueue 2's left and right children. tree = [1, 2, 3, None], queue = [2's right child, 3's left child, 3's right child, None, None]
Iter 5: node = None, deque 2's right child, assign None to 2's right child, enqueue 3's left and right children. tree = [1, 2, 3, None, None], queue = [3's left child, 3's right child, None, None, None, None]
Iter 6: node = 4, deque 3's left child, assign 4 to 3's left child, enqueue 4's left and right children. tree = [1, 2, 3, None, None, 4], queue = [3's right child, None, None, None, None, 4's left child, 4's right child]
Iter 7: node = 5, deque 3's right child, assign 5 to 3's right child, enqueue 5's left and right children. tree = [1, 2, 3, None, None, 4, 5], queue = [None, None, None, None, 4's left child, 4's right child, 5's left child, 5's right child]
Terminated because the data list is empty.
``` -->

<p><strong>Turn out that the above solution doesn‚Äôt work :joy::joy::joy:</strong> The reason is that, I misunderstood the problem. The problem requires us to serialize the tree to a string, not a list of lists. So I need to change the solution with the following changes:</p>

<ul>
  <li>The serializer returns a string instead of a list of lists.</li>
  <li>The deserializer takes a string as input instead of a list of lists.</li>
  <li>There is an <code class="language-plaintext highlighter-rouge">index</code> to manage the index of the current node in the data list.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
</span><span class="kn">import</span> <span class="n">math</span>

<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">''</span>

        <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
        <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">queue</span><span class="p">.</span><span class="nf">is_empty</span><span class="p">():</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">items</span><span class="p">)):</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">))</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode

        example: [</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">4</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">5</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">]
        example 2: 
            input = </span><span class="sh">'</span><span class="s">[1,2,null,3,null,4,null,5]</span><span class="sh">'</span><span class="s">
            encoded = [</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">4</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">5</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="s">]
        </span><span class="sh">"""</span>

        <span class="n">data_list</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">data_list</span> <span class="o">==</span> <span class="p">[</span><span class="sh">''</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">root</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">data_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
            <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>

            <span class="n">num_levels</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

            <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># to manage index of children in data_list
</span>
            <span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">):</span>
                <span class="n">parent</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
                <span class="n">left_child</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">data_list</span><span class="p">[</span><span class="n">index</span><span class="p">]))</span> <span class="k">if</span> <span class="n">data_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span> <span class="k">else</span> <span class="bp">None</span>
                <span class="n">right_child</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">data_list</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]))</span> <span class="k">if</span> <span class="n">data_list</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span> <span class="k">else</span> <span class="bp">None</span>
                <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">2</span> 
                <span class="n">parent</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left_child</span>
                <span class="n">parent</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right_child</span>
                <span class="k">if</span> <span class="n">left_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">left_child</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">right_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">right_child</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">root</span>

<span class="c1"># Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
</span></code></pre></div></div>

<p><strong>Solution with DFS</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node. We need to modify tree node to help this solution work
</span><span class="k">class</span> <span class="nc">MyTreeNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span>

<span class="kn">import</span> <span class="n">math</span>

<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">''</span>

        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">))</span>
                <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode

        example: 
            input = [1,2,3,null,null,4,5] in level order format
            encoded = [1,2,N,N,3,4,N,N,5,N,N] in preorder format
        example 2: 
            input = [1,2,null,3,null,4,null,5] in level order format
            encoded = [1,2,3,4,5,N,N,N,N,N] in preorder format
        </span><span class="sh">"""</span>

        <span class="n">data_list</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">data_list</span> <span class="o">==</span> <span class="p">[</span><span class="sh">''</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">root</span> <span class="o">=</span> <span class="nc">MyTreeNode</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">data_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
            <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>

            <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># to manage index of children in data_list
</span>
            <span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">):</span>
                <span class="n">node_val</span> <span class="o">=</span> <span class="n">data_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">node_val</span> <span class="o">==</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">parent</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                    <span class="k">if</span> <span class="n">parent</span><span class="p">.</span><span class="n">left</span> <span class="o">==</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">:</span>
                        <span class="n">parent</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
                        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">parent</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="nc">MyTreeNode</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">node_val</span><span class="p">))</span>
                    <span class="n">parent</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                    <span class="k">if</span> <span class="n">parent</span><span class="p">.</span><span class="n">left</span> <span class="o">==</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span><span class="p">:</span>
                        <span class="n">parent</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">parent</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span>
                    <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
                <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">root</span>

<span class="c1"># Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
</span></code></pre></div></div>

<p><strong>Turn out that leetcode doesn‚Äôt allow me to implement MyTreeNode class, I don‚Äôt know why yet</strong>. So I gave up and found the superb solution from <a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/solutions/396124/python-very-easy-to-understand-recursive-preorder-with-comments/">here</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="sh">'</span><span class="s">x</span><span class="sh">'</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="nf">str</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)])</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
		<span class="c1"># The reason I use self.data in the deserialize is, data stream will be consumed  as we build left side of Tree
</span>		<span class="c1"># by the time when the right side is building up, we need to hold what is left over.
</span>		<span class="c1"># Therefore, self.data is a global value, right side will use what is left over after tree is partially built
</span>        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">node</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[:</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)])</span> 
        <span class="n">node</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
        <span class="n">node</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">node</span>
</code></pre></div></div>

<p><strong>Extension: How to serialize a binary tree to a string with minimal length?</strong></p>

<ul>
  <li>The first idea is to use level order traversal to serialize the tree. Whenever we encounter a sequence of <code class="language-plaintext highlighter-rouge">None</code> values, we replace it with 2 values <code class="language-plaintext highlighter-rouge">None</code> and <code class="language-plaintext highlighter-rouge">numbers_of_None</code> where <code class="language-plaintext highlighter-rouge">numbers_of_None</code> is the number of <code class="language-plaintext highlighter-rouge">None</code> values in the sequence. For example, the sequence <code class="language-plaintext highlighter-rouge">[1, 2, None, None, None, 3, 4, None, None, None, None]</code> will be serialized to <code class="language-plaintext highlighter-rouge">[1, 2, None, 3, 4, None, 4]</code>. This approach will be beneficial when the tree is sparse.</li>
  <li>The second idea is to pre-define a set of encode-decode rules that know in both sides. We then self-analyze the tree and encode it with optimal rules. The optimal rule also be sent to the other side to decode the tree. For example, the outer tree <code class="language-plaintext highlighter-rouge">[1, 2, 3, 4, None, None, 5]</code> can be encode as <code class="language-plaintext highlighter-rouge">out [1, 2, 3, 4, 5]</code>.</li>
</ul>

<h2 id="572-subtree-of-another-tree"><a href="https://leetcode.com/problems/subtree-of-another-tree/">572. Subtree of Another Tree</a></h2>

<font size="6"> Description </font>

<p>Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.</p>

<p>A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node‚Äôs descendants. The tree tree could also be considered as a subtree of itself.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the root tree is in the range [1, 2000].</li>
  <li>The number of nodes in the subRoot tree is in the range [1, 1000].</li>
  <li>-10^4 &lt;= root.val &lt;= 10^4</li>
  <li>-10^4 &lt;= subRoot.val &lt;= 10^4</li>
</ul>

<font size="6"> Solution </font>

<p>The idea is to traverse the tree and convert to a list. If the list of the sub-tree is a sub-list of the list of the tree, then the sub-tree is a sub-tree of the tree. But we must use DFS instead of BFS because the order of the nodes in the list matters and DFS preserves the order of the nodes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSubtree</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">subRoot</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="n">tree</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="n">sub_tree</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">subRoot</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sub_tree</span> <span class="ow">in</span> <span class="n">tree</span>
</code></pre></div></div>

<p><strong>Turn out that the above approach just pass 181 over 182 test cases :joy:. The fail test case is actually very simple that I didn‚Äôt think of it. The test case is <code class="language-plaintext highlighter-rouge">root=[12]</code> and <code class="language-plaintext highlighter-rouge">subroot=[2]</code> so the function return <code class="language-plaintext highlighter-rouge">True</code> because the string <code class="language-plaintext highlighter-rouge">2</code> is in the string <code class="language-plaintext highlighter-rouge">12</code>. The solution is adding special symbols at the begin and end of each node value</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSubtree</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">subRoot</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">N</span><span class="sh">'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span> <span class="o">+</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="n">tree</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="n">sub_tree</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">subRoot</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sub_tree</span> <span class="ow">in</span> <span class="n">tree</span>
</code></pre></div></div>

<p><strong>My solution beats 98.03% of users with Python3 in term of Runtime :smile: but just 18.95% in term of Memory</strong></p>

<h2 id="105-construct-binary-tree-from-preorder-and-inorder-traversal"><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. Construct Binary Tree from Preorder and Inorder Traversal</a></h2>

<font size="6"> Description </font>

<p>Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2021/02/19/tree-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2021/02/19/tree-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2021/02/19/tree-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: preorder = [-1], inorder = [-1]
Output: [-1]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>1 &lt;= preorder.length &lt;= 3000</li>
  <li>inorder.length == preorder.length</li>
  <li>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</li>
  <li>preorder and inorder consist of unique values.</li>
  <li>Each value of inorder also appears in preorder.</li>
  <li>preorder is guaranteed to be the preorder traversal of the tree.</li>
  <li>inorder is guaranteed to be the inorder traversal of the tree.</li>
</ul>

<font size="6"> Solution </font>

<p>The problem is a bit ambiguous to me in the first place, because normally if we have either preorder or inorder traversal, we can construct the tree. But in this problem, we need both lists. And the reason is because we don‚Äôt have <code class="language-plaintext highlighter-rouge">None</code> or <code class="language-plaintext highlighter-rouge">null</code> values in the lists to indicate the end of the left or right sub-tree. Therefore, we need both lists and match the values in the lists to construct the tree.</p>

<p>Some important observations:</p>

<ul>
  <li>The first element in the preorder list is always the root of the tree.</li>
  <li>The root of the tree divides the inorder list into two parts: the left sub-tree and the right sub-tree.</li>
  <li>The root of the left sub-tree is the one in the preorder list that is right after the root of the tree.</li>
</ul>

<p>Based on the above observations, here is the solution</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">preorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">inorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">preorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">root</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">root_index</span> <span class="o">=</span> <span class="n">inorder</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">buildTree</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">root_index</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">inorder</span><span class="p">[:</span><span class="n">root_index</span><span class="p">])</span>
            <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">buildTree</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="n">root_index</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">inorder</span><span class="p">[</span><span class="n">root_index</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
            <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<h2 id="98-validate-binary-search-tree">98. <a href="https://leetcode.com/problems/validate-binary-search-tree/">Validate Binary Search Tree</a></h2>

<font size="6"> Description </font>

<p>Given the root of a binary tree, determine if it is a valid binary search tree (BST).</p>

<p>A valid BST is defined as follows:</p>

<ul>
  <li>The left subtree of a node contains only nodes with keys less than the node‚Äôs key.</li>
  <li>The right subtree of a node contains only nodes with keys greater than the node‚Äôs key.</li>
  <li>Both the left and right subtrees must also be binary search trees.</li>
</ul>

<p>Example 1:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [2,1,3]
Output: true
</code></pre></div></div>

<p>Example 2:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2020/12/01/tree2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [1, 10^4].</li>
  <li>-2^31 &lt;= Node.val &lt;= 2^31 - 1</li>
</ul>

<font size="6"> Solution </font>

<p>Clarification:</p>

<ul>
  <li>What if the tree like this <code class="language-plaintext highlighter-rouge">[5, 1, 6, null, null, 3, 7]</code>? It violates the BST property because the left child of 6 is 3 which is smaller than its grandparent 5. Therefore the expected output is <code class="language-plaintext highlighter-rouge">False</code>.</li>
</ul>

<p>So the solution is to use inorder traversal to traverse the tree and check if the values are in ascending order.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValidBST</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">def</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span> <span class="o">==</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">output</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="230-kth-smallest-element-in-a-bst"><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/">230. Kth Smallest Element in a BST</a></h2>

<font size="6"> Description </font>

<p>Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.</p>

<p>Example 1:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,1,4,null,2], k = 1
Output: 1
</code></pre></div></div>

<p>Example 2:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2021/01/28/kthtree2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is n.</li>
  <li>1 &lt;= k &lt;= n &lt;= 10^4</li>
  <li>0 &lt;= Node.val &lt;= 10^4</li>
</ul>

<font size="6"> Solution </font>

<p>Similar to the above problem <a href="https://leetcode.com/problems/validate-binary-search-tree/">98. Validate Binary Search Tree</a>, we can use inorder traversal to traverse the tree and store the values in a list. Then we return the kth element in the list.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">kthSmallest</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">def</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p><strong>My solution beats 90.98% of users with Python3 in term of Runtime and 95.87% in term of Memory</strong></p>

<h2 id="235-lowest-common-ancestor-of-a-binary-search-tree"><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. Lowest Common Ancestor of a Binary Search Tree</a></h2>

<font size="6"> Description </font>

<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>

<p>According to the definition of LCA on Wikipedia: ‚ÄúThe lowest common ancestor of two nodes p and q in a binary search tree (BST) is the lowest node in the tree that has both p and q as descendants (where we allow <strong>a node to be a descendant of itself</strong>).‚Äù</p>

<p>Example 1:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
</code></pre></div></div>

<p>Example 2:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [2,1], p = 2, q = 1
Output: 2
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the tree is in the range [2, 10^5].</li>
  <li>-10^9 &lt;= Node.val &lt;= 10^9</li>
  <li>All Node.val are unique.</li>
  <li>p != q</li>
  <li>p and q will exist in the BST.</li>
</ul>

<font size="6"> Solution </font>

<!-- The idea is to apply inorder traverse and store the values in a list. Because all nodes' values are unique, we can find the index of the nodes in the list and return the root of the sub-tree formed from the sub-list.

We can also build a reverse tree where each node has its value and link to its parent. Then we can find the path from the two nodes to the root and find the first common node in the two paths. But how to find the starting node of a path? We can use a set to store the starting nodes (p, q nodes). -->

<p>Important observations:</p>

<ul>
  <li>The tree is BST, therefore, by definition, the left sub-tree of a node contains only nodes with keys less than the node‚Äôs key and the right sub-tree of a node contains only nodes with keys greater than the node‚Äôs key.</li>
  <li>we can check if the values of the root is between the values of the two nodes. If yes, then the root is the LCA. Otherwise, we can recursively check the left or right sub-tree of the root.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">,</span> <span class="n">q</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">val</span> <span class="ow">and</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">val</span> <span class="ow">and</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<p>Another solution that might run faster and avoid recursion is to use a while loop which I found from <a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solutions/64963/3-lines-with-o-1-space-1-liners-alternatives/">here</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">,</span> <span class="n">q</span><span class="p">:</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">'</span><span class="s">TreeNode</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">val</span> <span class="ow">and</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span>
            <span class="k">elif</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">val</span> <span class="ow">and</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<h2 id="208-implement-trie-prefix-tree"><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">208. Implement Trie (Prefix Tree)</a></h2>

<font size="6"> Description </font>

<p>A trie (pronounced as ‚Äútry‚Äù) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>

<p>Implement the Trie class:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Trie()</code> Initializes the trie object.</li>
  <li><code class="language-plaintext highlighter-rouge">void insert(String word)</code> Inserts the string word into the trie.</li>
  <li><code class="language-plaintext highlighter-rouge">boolean search(String word)</code> Returns <code class="language-plaintext highlighter-rouge">true</code> if the string <code class="language-plaintext highlighter-rouge">word</code> is in the trie (i.e., was inserted before), and <code class="language-plaintext highlighter-rouge">false</code> otherwise.</li>
  <li><code class="language-plaintext highlighter-rouge">boolean startsWith(String prefix)</code> Returns <code class="language-plaintext highlighter-rouge">true</code> if there is a previously inserted string <code class="language-plaintext highlighter-rouge">word</code> that has the prefix <code class="language-plaintext highlighter-rouge">prefix</code>, and <code class="language-plaintext highlighter-rouge">false</code> otherwise.</li>
</ul>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
Output
[null, null, true, false, true, null, true]

Explanation
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // return True
trie.search("app");     // return False
trie.startsWith("app"); // return True
trie.insert("app");
trie.search("app");     // return True
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>1 &lt;= word.length, prefix.length &lt;= 2000</li>
  <li>word and prefix consist only of lowercase English letters.</li>
  <li>At most 3 * 10^4 calls in total will be made to insert, search, and startsWith.</li>
</ul>

<font size="6"> Solution </font>

<p>We will use dictionary for this problem (I don‚Äôt understand why this question classified as a Tree problem). We can use one dictionary to store words and another dictionary to store all posible prefixes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prefix_dict</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">break_word</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="nf">break_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">prefix_dict</span><span class="p">[</span><span class="n">prefix</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span>
        

    <span class="k">def</span> <span class="nf">startsWith</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prefix</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">prefix_dict</span>


<span class="c1"># Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
</span></code></pre></div></div>

<p><strong>Surprisingly, my solution beats 94.76% of users with Python 3 in term of Memory even though I use two dictionaries.</strong></p>

<h2 id="211-design-add-and-search-words-data-structure"><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/">211. Design Add and Search Words Data Structure</a></h2>

<font size="6"> Description </font>

<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>

<p>Implement the WordDictionary class:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">WordDictionary()</code> Initializes the object.</li>
  <li><code class="language-plaintext highlighter-rouge">void addWord(word)</code> Adds word to the data structure, it can be matched later.</li>
  <li><code class="language-plaintext highlighter-rouge">bool search(word)</code> Returns <code class="language-plaintext highlighter-rouge">true</code> if there is any string in the data structure that matches <code class="language-plaintext highlighter-rouge">word</code> or <code class="language-plaintext highlighter-rouge">false</code> otherwise. <code class="language-plaintext highlighter-rouge">word</code> may contain dots ‚Äò.‚Äô where dots can be matched with any letter.</li>
</ul>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>1 &lt;= word.length &lt;= 500</li>
  <li>word in addWord consists lower-case English letters.</li>
  <li>word in search consist of  ‚Äò.‚Äô or lower-case English letters.</li>
  <li>There will be at most 2 dots in word for search queries.</li>
  <li>At most 10000 calls will be made to addWord and search.</li>
</ul>

<font size="6"> Solution </font>

<p>We can still use dictionary as in the previous problem, but with a bit modification. We need a specific function to replace at most two characters in each word by <code class="language-plaintext highlighter-rouge">dot</code> and store the new words in the dictionary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WordDictionary</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">replace_char</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># replace one character
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
            <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
        <span class="c1"># replace two characters
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">output</span>
    

    <span class="k">def</span> <span class="nf">addWord</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">new_word</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="nf">replace_char</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span><span class="p">[</span><span class="n">new_word</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">word_dict</span>


<span class="c1"># Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
</span></code></pre></div></div>

<p><strong>Turn out that my solution is bad :joy: because it beats only 5% of users with Python 3 in term of Runtime and Memory. Maybe we need a Tree approach. I think my solution might be good in the scenario when we need search more than addWord operations. Because the heaviest task is to break the word into new words and store them in the dictionary.</strong></p>

<!-- In the following solution, I will split tasks into two functions. The `break_word` function will split a word into two parts: prefix and suffix. The `addWord` will store word, its prefix and suffix in two dictionaries. The main difference is in the `search` function where we need to consider three scenarios:

- If there is no dot in the word, we just need to check if the word is in the dictionary.
- If there is only one dot, we need to check if the prefix is in the prefix dictionary and the suffix is matched with the associated value in the prefix dictionary.
- If there is two dots, we need to check if the prefix is in the prefix dictionary. If yes, we need to replace the dot in the suffix and check if it is matched with the query word.

```python
class WordDictionary:

    def __init__(self):
        self.word_dict = dict()
        self.prefix_dict = dict()

    def break_word(self, word):
        output = []
        for i in range(len(word)):
            output.append((word[:i], word[i:]))
        return output

    def addWord(self, word: str) -> None:
        self.word_dict[word] = True 
        for prefix, suffix in self.break_word(word):
            if prefix not in self.prefix_dict:
                self.prefix_dict[prefix] = []
            self.prefix_dict[prefix].append(suffix)

    def search(self, word: str) -> bool:
        if '.' not in word:
            return word in self.word_dict
        elif word.count('.') == 1:
            prefix, suffix = word.split('.')
            if prefix in self.prefix_dict:
                return suffix in self.prefix_dict[prefix]
            else:
                return False
        else:
            prefix, suffix = word.split('.')
            if prefix in self.prefix_dict:
                for s in self.prefix_dict[prefix]:
                    if s == suffix:
                        return True
                    elif s.count('.') == 1:
                        s_prefix, s_suffix = s.split('.')
                        if s_prefix == suffix:
                            return True
            return False
``` -->

<h2 id="212-word-search-ii"><a href="https://leetcode.com/problems/word-search-ii/">212. Word Search II</a></h2>

<font size="6"> Description </font>

<p>Given an <code class="language-plaintext highlighter-rouge">m x n</code> board of characters and a list of strings words, return all words on the board.</p>

<p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>

<p>Example 1:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
</code></pre></div></div>

<p>Example 2:</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://assets.leetcode.com/uploads/2020/11/07/search2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">m == board.length</code></li>
  <li><code class="language-plaintext highlighter-rouge">n == board[i].length</code></li>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= m, n &lt;= 12</code></li>
  <li><code class="language-plaintext highlighter-rouge">board[i][j]</code> is a lowercase English letter.</li>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= words.length &lt;= 3 * 104</code></li>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= words[i].length &lt;= 10</code></li>
  <li><code class="language-plaintext highlighter-rouge">words[i]</code> consists of lowercase English letters.</li>
  <li>All the strings of words are unique.</li>
</ul>

<font size="6"> Solution </font>

<p>I have to refer to some solutions (<a href="https://leetcode.com/problems/word-search-ii/solutions/3224569/212-beats-94-solution-with-step-by-step-explanation/">here</a> and <a href="https://leetcode.com/problems/word-search-ii/solutions/3224569/212-beats-94-solution-with-step-by-step-explanation/">here</a>) to find out how to solve this problem. The idea is to use <a href="#trie">Trie</a> to store the words and use DFS to traverse the board to find all possible words.</p>

<p>Clarification: Because the same letter cell may not be used more than once in a word, we need to keep track of the visited cells in the board. We can use a set to store the visited cells or we can modify the board by replacing the visited cells with a special character (e.g. <code class="language-plaintext highlighter-rouge">#</code>), but it will cost more memory because we need to carry out the modified board recursively.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>
        <span class="n">node</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">node</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="ow">or</span> <span class="n">node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">add_boundary</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    a helper function to add boundary to the board
    board with size m x n --&gt; board with size (m+2) x (n+2)
    </span><span class="sh">"""</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">new_board</span> <span class="o">=</span> <span class="p">[[</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">new_board</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">new_board</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">new_board</span>
    

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findWords</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">def</span> <span class="nf">build_trie</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">board</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">trie</span> <span class="o">=</span> <span class="nc">Trie</span><span class="p">()</span>

        
        <span class="n">self</span><span class="p">.</span><span class="nf">build_trie</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">trie</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>

</code></pre></div></div>

<h2 id="reflection-binary-tree-problems">Reflection: Binary Tree Problems?</h2>

<p>This is a placeholder for me to reflect what I have learned to solve the binary tree problems. So far</p>

<ul>
  <li>Tree traversal algorithms are the foundation of solving binary tree problems.</li>
  <li>Recursion and Recursive thinking</li>
  <li>The base case of the recursion is very important. It is the condition that stops the recursion.</li>
  <li>Trie is a tree data structure that is used to store strings. It is very useful in solving string problems.</li>
</ul>

<p>I also found that the following resources are very useful:</p>

<ul>
  <li><a href="https://youtu.be/s2Yyk3qdy3o?si=D-bOndNHktjDEC3j">How to solve (almost) any binary tree coding problem</a> by Inside code.
    <ul>
      <li>Finding one or more base cases</li>
      <li>Calling the same function on the left subtree</li>
      <li>Calling the same function on the right subtree</li>
      <li>Joining the results</li>
    </ul>
  </li>
</ul>

<h3 id="revisit-tree-traversal-techniques"><a href="https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/">Revisit: Tree Traversal Techniques</a></h3>

<p>Source: <a href="https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/">https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/</a></p>

<font size="6"> What is tree traversal? </font>

<p>Tree traversal is the process of visiting (checking and/or updating) each node in a tree data structure, exactly once. Such traversals are classified by the order in which the nodes are visited. Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can be traversed in different ways. Two most important ways are traversal by level (BFS) and traversal by depth (DFS).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230623123129/traversal-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230623123129/traversal-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230623123129/traversal-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.geeksforgeeks.org/wp-content/uploads/20230623123129/traversal.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Tree Traversal Example
</div>

<font size="6"> Inorder Traversal </font>

<blockquote class="block-warning">
  <p><strong>Inorder Traversal Algorithm</strong></p>

  <ol>
    <li>Traverse the left subtree, i.e., call Inorder(left-subtree)</li>
    <li>Visit the root.</li>
    <li>Traverse the right subtree, i.e., call Inorder(right-subtree)</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
</span><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
        <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
</code></pre></div></div>

<font size="6"> Preorder Traversal </font>

<blockquote class="block-warning">
  <p><strong>Preorder Traversal Algorithm</strong></p>

  <ol>
    <li>Visit the root.</li>
    <li>Traverse the left subtree, i.e., call Preorder(left-subtree)</li>
    <li>Traverse the right subtree, i.e., call Preorder(right-subtree)</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
</span><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">preorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
        <span class="nf">preorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="nf">preorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
</code></pre></div></div>

<p>Problems:</p>

<ul>
  <li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/">104. Maximum Depth of Binary Tree</a></li>
</ul>

<font size="6"> Postorder Traversal </font>

<blockquote class="block-warning">
  <p><strong>Postorder Traversal Algorithm</strong></p>

  <ol>
    <li>Traverse the left subtree, i.e., call Postorder(left-subtree)</li>
    <li>Traverse the right subtree, i.e., call Postorder(right-subtree)</li>
    <li>Visit the root.</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
</span><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">postorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">postorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="nf">postorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>

<font size="6"> Level Order Traversal </font>

<blockquote class="block-warning">
  <p><strong>Level Order Traversal Algorithm</strong></p>

  <ol>
    <li>Create an empty queue q</li>
    <li>Enqueue root to q</li>
    <li>Loop while q is not empty <br />
a. Dequeue a node from q and print its value <br />
b. Enqueue node‚Äôs children (first left then right children) to q if they are not null</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Simple implementation of a queue using a list
</span><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div></div>

<p>The following code snippet shows how to implement the BFS algorithm to traverse the tree.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Simple BFS implementation
</span><span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">queue</span><span class="p">.</span><span class="nf">is_empty</span><span class="p">():</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">dequeue</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="-revisit-trie-data-structure"><a name="trie"></a> Revisit Trie Data Structure</h3>

<p>Source: <a href="https://www.geeksforgeeks.org/trie-insert-and-search/">https://www.geeksforgeeks.org/trie-insert-and-search/</a></p>

<font size="6"> What is Trie? </font>

<p>In short, Trie is a k-ary tree where k is the largest number of children of a node.</p>

<p>Because of its structure, Trie is an efficient information retrieval data structure. Using Trie, search complexities can be brought to optimal limit (key length). If we store keys in binary search tree, a well balanced BST will need time proportional to <code class="language-plaintext highlighter-rouge">M * log N</code>, where M is maximum string length and N is number of keys in tree. Using Trie, we can search the key in <code class="language-plaintext highlighter-rouge">O(M)</code> time. However the penalty is on Trie storage requirements.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220828232752/Triedatastructure1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220828232752/Triedatastructure1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220828232752/Triedatastructure1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.geeksforgeeks.org/wp-content/uploads/20220828232752/Triedatastructure1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Trie Example. In this example, it is assumed that only English alphabets are used. Therefore, each node can have at most 26 children, even it looks like a binary tree.
</div>

<p>The following code is a simple Trie for English alphabet.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
     
    <span class="c1"># Trie node class
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="mi">26</span>
 
        <span class="c1"># isEndOfWord is True if node represent the end of the word
</span>        <span class="n">self</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<font size="6"> Insert and Search Opeartions </font>

<p>To insert a key to Trie, we need to do the following steps:</p>

<ul>
  <li>Starting from the root, we check if the current node has a child corresponding to the first character of the key. If yes, we move to that child and continue to check the next character.</li>
  <li>If no, we create a new node and link it to the current node.</li>
  <li>We repeat the above steps until we reach the last character of the key. Then we mark the last node as the end of the key.</li>
</ul>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220902035030/ex1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220902035030/ex1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220902035030/ex1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.geeksforgeeks.org/wp-content/uploads/20220902035030/ex1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Insertion example
</div>

<p>To search a key in Trie, we need to do the following steps:</p>

<ul>
  <li>Starting from the root, we check if the current node has a child corresponding to the first character of the key. If yes, we move to that child and continue to check the next character.</li>
  <li>If no, we return <code class="language-plaintext highlighter-rouge">False</code>.</li>
  <li>We repeat the above steps until we reach the last character of the key. Then we return <code class="language-plaintext highlighter-rouge">True</code> if the last node is marked as the end of the key.</li>
</ul>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220831073313/search1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220831073313/search1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220831073313/search1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://media.geeksforgeeks.org/wp-content/uploads/20220831073313/search1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Search example
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">chartoIndex</span><span class="p">(</span><span class="n">ch</span><span class="p">):</span>
    <span class="c1"># private helper function
</span>    <span class="c1"># Converts key current character into index
</span>    <span class="c1"># use only 'a' through 'z' and lower case
</span>    <span class="k">return</span> <span class="nf">ord</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span><span class="o">-</span><span class="nf">ord</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span> 
        <span class="n">length</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">level</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nf">chartoIndex</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">level</span><span class="p">])</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="n">cur</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
        <span class="n">length</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">level</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nf">chartoIndex</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">level</span><span class="p">])</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">cur</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">cur</span><span class="p">.</span><span class="n">isEndOfWord</span>
</code></pre></div></div>

<p>Another implementation of Trie is to use dictionary which is preferred in Leetcode.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">ch</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span>
        <span class="n">cur</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">ch</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">cur</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">cur</span><span class="p">.</span><span class="n">isEndOfWord</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Not something fancy]]></summary></entry><entry><title type="html">75 Leetcode Questions on Linked List</title><link href="http://localhost:4000/blog/2024/project_75_leetcode_questions_linkedlist/" rel="alternate" type="text/html" title="75 Leetcode Questions on Linked List" /><published>2024-11-14T00:00:00-08:00</published><updated>2024-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/project_75_leetcode_questions_linkedlist</id><content type="html" xml:base="http://localhost:4000/blog/2024/project_75_leetcode_questions_linkedlist/"><![CDATA[<p>In this project, I will try to solve 75 Leetcode questions as listed in this <a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU">link</a>.</p>

<h2 id="206-reverse-linked-list"><a href="https://leetcode.com/problems/reverse-linked-list/">206. Reverse Linked List</a></h2>

<font size="6"> Description </font>

<p>Given the head of a singly linked list, reverse the list, and return the reversed list.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
</code></pre></div></div>

<p>Example 2:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2]
Output: [2,1]
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = []
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the list is the range [0, 5000].</li>
  <li>-5000 &lt;= Node.val &lt;= 5000</li>
</ul>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseList</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="n">curr</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nb">next</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="c1"># save the next node
</span>            <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">prev</span> <span class="c1"># reverse the link
</span>            <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span> <span class="c1"># move backward one step
</span>            <span class="n">curr</span> <span class="o">=</span> <span class="nb">next</span> <span class="c1"># move to the next node in the original list
</span>        <span class="k">return</span> <span class="n">prev</span>
</code></pre></div></div>

<!-- **Recursive solution**

```python
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None or head.next is None:
            return head
        new_head = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return new_head
``` -->

<h2 id="141-linked-list-cycle"><a href="https://leetcode.com/problems/linked-list-cycle/">141. Linked List Cycle</a></h2>

<font size="6"> Description </font>

<p>Given head, the head of a linked list, determine if the linked list has a cycle in it.</p>

<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail‚Äôs next pointer is connected to. Note that pos is not passed as a parameter.</p>

<p>Return true if there is a cycle in the linked list. Otherwise, return false.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
</code></pre></div></div>

<p>Example 2:</p>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
</code></pre></div></div>

<p>Example 3:</p>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of the nodes in the list is in the range [0, 104].</li>
  <li>-105 &lt;= Node.val &lt;= 105</li>
  <li>pos is -1 or a valid index in the linked-list.</li>
</ul>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="c1"># add a new attribute to the node when visited
</span>        <span class="k">while</span> <span class="n">head</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="sh">'</span><span class="s">visited</span><span class="sh">'</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="n">head</span><span class="p">.</span><span class="n">visited</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h2 id="21-merge-two-sorted-lists"><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h2>

<font size="6"> Description </font>

<p>Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [], l2 = []
Output: []
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [], l2 = [0]
Output: [0]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in both lists is in the range [0, 50].</li>
  <li>-100 &lt;= Node.val &lt;= 100</li>
  <li>Both l1 and l2 are sorted in non-decreasing order.</li>
</ul>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">list1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">list2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="n">merged</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">()</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">merged</span>
        <span class="k">while</span> <span class="n">list1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">list2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">list1</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">list2</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list1</span>
                <span class="n">list1</span> <span class="o">=</span> <span class="n">list1</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list2</span>
                <span class="n">list2</span> <span class="o">=</span> <span class="n">list2</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">merged</span> <span class="o">=</span> <span class="n">merged</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">list1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list1</span>
        <span class="k">if</span> <span class="n">list2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list2</span>
        <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="23-merge-k-sorted-lists"><a href="https://leetcode.com/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists</a></h2>

<font size="6"> Description </font>

<p>You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.</p>

<p>Merge all the linked-lists into one sorted linked-list and return it.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1-&gt;4-&gt;5,
  1-&gt;3-&gt;4,
  2-&gt;6
]
merging them into one sorted list:
1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: lists = []
Output: []
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: lists = [[]]
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>k == lists.length</li>
  <li>0 &lt;= k &lt;= 10^4</li>
  <li>0 &lt;= lists[i].length &lt;= 500</li>
  <li>-10^4 &lt;= lists[i][j] &lt;= 10^4</li>
  <li>lists[i] is sorted in ascending order.</li>
  <li>The sum of lists[i].length won‚Äôt exceed 10^4.</li>
</ul>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">mergeKLists</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">lists</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">def</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">list1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">list2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
            <span class="n">merged</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">()</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">merged</span>
            <span class="k">while</span> <span class="n">list1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">list2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">list1</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">list2</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list1</span>
                    <span class="n">list1</span> <span class="o">=</span> <span class="n">list1</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list2</span>
                    <span class="n">list2</span> <span class="o">=</span> <span class="n">list2</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">merged</span> <span class="o">=</span> <span class="n">merged</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="n">list1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list1</span>
            <span class="k">if</span> <span class="n">list2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">merged</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">list2</span>
            <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">lists</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">merged</span> <span class="o">=</span> <span class="n">lists</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">)):</span>
            <span class="n">merged</span> <span class="o">=</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">merged</span><span class="p">,</span> <span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">merged</span>
</code></pre></div></div>

<h2 id="19-remove-nth-node-from-end-of-list"><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h2>

<font size="6"> Description </font>

<p>Given the head of a linked list, remove the nth node from the end of the list and return its head.</p>

<p>Follow up: Could you do this in one pass?</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1], n = 1
Output: []
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2], n = 1
Output: [1]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the list is sz.</li>
  <li>1 &lt;= sz &lt;= 30</li>
  <li>0 &lt;= Node.val &lt;= 100</li>
  <li>1 &lt;= n &lt;= sz</li>
</ul>

<font size="6"> Solution </font>

<p>Using two-pointer method, with the distance between two-pointer is n.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">second</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">second</span> <span class="o">=</span> <span class="n">second</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">second</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">while</span> <span class="n">second</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">second</span> <span class="o">=</span> <span class="n">second</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>

<h2 id="143-reorder-list"><a href="https://leetcode.com/problems/reorder-list/">143. Reorder List</a></h2>

<font size="6"> Description </font>

<p>You are given the head of a singly linked-list. The list can be represented as:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>L0 ‚Üí L1 ‚Üí ‚Ä¶ ‚Üí Ln - 1 ‚Üí Ln
</code></pre></div></div>

<p>Reorder the list to be on the following form:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>L0 ‚Üí Ln ‚Üí L1 ‚Üí Ln - 1 ‚Üí L2 ‚Üí Ln - 2 ‚Üí ‚Ä¶
</code></pre></div></div>

<p>You may not modify the values in the list‚Äôs nodes. Only nodes themselves may be changed.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2,3,4]
Output: [1,4,2,3]
</code></pre></div></div>

<p>Example 2:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the list is in the range [1, 5 * 10^4].</li>
  <li>1 &lt;= Node.val &lt;= 1000</li>
</ul>

<p>Follow up: Can you solve the problem in O(1) extra space complexity and O(n) runtime complexity?</p>

<font size="6"> Solution </font>

<p>Reverse the second half of the list, then merge two lists.
Using two-pointer method to find the middle of the list.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reorderList</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Do not return anything, modify head in-place instead.
        </span><span class="sh">"""</span>
        <span class="c1"># find the middle of the list
</span>        <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span> <span class="c1"># slow pointer
</span>        <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span> <span class="c1"># fast pointer
</span>        <span class="k">while</span> <span class="n">fast</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
        <span class="c1"># reverse the second half of the list
</span>        <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">slow</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nb">next</span> <span class="o">=</span> <span class="n">slow</span><span class="p">.</span><span class="nb">next</span> <span class="c1"># save the next node
</span>            <span class="n">slow</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">prev</span> <span class="c1"># reverse the link
</span>            <span class="n">prev</span> <span class="o">=</span> <span class="n">slow</span> <span class="c1"># move backward one step
</span>            <span class="n">slow</span> <span class="o">=</span> <span class="nb">next</span> <span class="c1"># move to the next node in the original list
</span>        <span class="c1"># merge two lists
</span>        <span class="c1"># head is the first half of the list
</span>        <span class="c1"># prev is the second half of the list
</span>        <span class="k">while</span> <span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="c1"># save the next node in the first half
</span>            <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">prev</span> <span class="c1"># link the first half to the second half
</span>            <span class="n">head</span> <span class="o">=</span> <span class="n">temp</span> <span class="c1"># move to the next node in the first half
</span>            <span class="n">temp</span> <span class="o">=</span> <span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="c1"># save the next node in the second half
</span>            <span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span> <span class="c1"># link the second half to the first half
</span>            <span class="n">prev</span> <span class="o">=</span> <span class="n">temp</span> <span class="c1"># move to the next node in the second half
</span></code></pre></div></div>

<h2 id="203-remove-linked-list-elements"><a href="https://leetcode.com/problems/remove-linked-list-elements/">203. Remove Linked List Elements</a></h2>

<font size="6"> Description </font>

<p>Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [], val = 1
Output: []
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [7,7,7,7], val = 7
Output: []
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in the list is in the range [0, 10^4].</li>
  <li>1 &lt;= Node.val &lt;= 50</li>
  <li>0 &lt;= k &lt;= 50</li>
</ul>

<font size="6"> Solution </font>

<p><strong>Iterative solution</strong></p>

<p>There might be a case that:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">[1, x, x, 2, 3, 4]</code>: two or more consecutive nodes have to be removed. Therefore, we need two pointers, <code class="language-plaintext highlighter-rouge">curr</code> to traverse the list, and <code class="language-plaintext highlighter-rouge">prev</code> to keep track of the previous <code class="language-plaintext highlighter-rouge">valid</code> node. If <code class="language-plaintext highlighter-rouge">curr == val</code>, then we move <code class="language-plaintext highlighter-rouge">curr</code> to the next node but keep <code class="language-plaintext highlighter-rouge">prev</code> unchanged. If <code class="language-plaintext highlighter-rouge">curr != val</code>, then we link <code class="language-plaintext highlighter-rouge">prev</code> to <code class="language-plaintext highlighter-rouge">curr</code> and move <code class="language-plaintext highlighter-rouge">curr</code> to the next node.</li>
  <li><code class="language-plaintext highlighter-rouge">[x, 1, 2, 3]</code>: the first node has to be removed. To handle this case, we need to create a dummy node and link it to the head of the list.</li>
</ul>

<p>So in total we need three pointers: <code class="language-plaintext highlighter-rouge">dummy</code>, <code class="language-plaintext highlighter-rouge">prev</code> and <code class="language-plaintext highlighter-rouge">curr</code>. We can use <code class="language-plaintext highlighter-rouge">head</code> as <code class="language-plaintext highlighter-rouge">curr</code> to save memory.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="n">dummy</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">()</span>
        <span class="n">dummy</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">dummy</span>
        <span class="k">while</span> <span class="n">head</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
                <span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">head</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">dummy</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<p><strong>Recursive solution</strong></p>

<p>Because we do the same task for <code class="language-plaintext highlighter-rouge">head</code> or <code class="language-plaintext highlighter-rouge">head.next</code>, we can use recursion to simplify the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nf">remove</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">head</span>

        <span class="nf">remove</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>

        <span class="c1"># There is still a case when the first node has to be removed.
</span>        <span class="k">if</span> <span class="n">head</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">head</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div></div>

<p>or even simpler:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">removeElements</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span>
</code></pre></div></div>

<p>But the recursive solution is slower and uses more memory than the iterative solution.</p>

<h2 id="160-intersection-of-two-linked-lists"><a name="160"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">160. Intersection of Two Linked Lists</a></h2>

<font size="6"> Description </font>

<p>Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.</p>

<p>For example, the following two linked lists begin to intersect at node c1:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png" alt="img" /></p>

<p>It is guaranteed that there are no cycles anywhere in the entire linked structure.</p>

<p>Note that the linked lists must retain their original structure after the function returns.</p>

<p>Custom Judge:</p>

<p>The inputs to the judge are given as follows (your program is not given these inputs):</p>

<ul>
  <li>intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.</li>
  <li>listA - The first linked list.</li>
  <li>listB - The second linked list.</li>
  <li>skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.</li>
  <li>skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.</li>
</ul>

<p>The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. 
There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
<span class="p">-</span> Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. 
In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
</code></pre></div></div>

<p>Example 2:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. 
There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
</code></pre></div></div>

<p>Example 3:</p>

<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. 
From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes of <code class="language-plaintext highlighter-rouge">listA</code> is in the <code class="language-plaintext highlighter-rouge">m</code>.</li>
  <li>The number of nodes of <code class="language-plaintext highlighter-rouge">listB</code> is in the <code class="language-plaintext highlighter-rouge">n</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= m, n &lt;= 3 * 104</code></li>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= Node.val &lt;= 105</code></li>
  <li><code class="language-plaintext highlighter-rouge">0 &lt;= skipA &lt; m</code></li>
  <li><code class="language-plaintext highlighter-rouge">0 &lt;= skipB &lt; n</code></li>
  <li><code class="language-plaintext highlighter-rouge">intersectVal</code> is <code class="language-plaintext highlighter-rouge">0</code> if <code class="language-plaintext highlighter-rouge">listA</code> and <code class="language-plaintext highlighter-rouge">listB</code> do not intersect.</li>
  <li><code class="language-plaintext highlighter-rouge">intersectVal == listA[skipA] == listB[skipB]</code> if <code class="language-plaintext highlighter-rouge">listA</code> and <code class="language-plaintext highlighter-rouge">listB</code> intersect.</li>
</ul>

<p>Follow up: Could you write a solution that runs in O(n) time and use only O(1) memory?</p>

<font size="6"> Solution </font>

<!-- 
The simplest solution is to reverse the two lists, then traverse the two lists to find the first different node. The intersection is the previous node.

```python
def reverse_and_count(head: Optional[ListNode]) -> Optional[ListNode]:
    prev = None
    count = 0
    while head is not None:
        count += 1
        next = head.next
        head.next = prev
        prev = head
        head = next
    return prev, count

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        pA = headA
        pB = headB
        reversedA, countA = reverse_and_count(pA)
        reversedB, countB = reverse_and_count(pB)
        count_diff = 0
        while reversedA is not None and reversedB is not None:
            if reversedA != reversedB:
                break
            count_diff += 1
            reversedA = reversedA.next
            reversedB = reversedB.next
        if count_diff == 0:
            return None
        else:
            for i in range(countA - count_diff):
                headA = headA.next
            return headA
``` -->

<p>I gave up on this problem and found this beautiful solution <a href="https://leetcode.com/problems/intersection-of-two-linked-lists/solutions/49785/java-solution-without-knowing-the-difference-in-len/">here</a>. The idea is to use two pointers, <code class="language-plaintext highlighter-rouge">pA</code> and <code class="language-plaintext highlighter-rouge">pB</code>, to traverse the two lists. When <code class="language-plaintext highlighter-rouge">pA</code> reaches the end of the list, we move it to the head of <code class="language-plaintext highlighter-rouge">listB</code>. Similarly, when <code class="language-plaintext highlighter-rouge">pB</code> reaches the end of the list, we move it to the head of <code class="language-plaintext highlighter-rouge">listA</code>. If there is an intersection, <code class="language-plaintext highlighter-rouge">pA</code> and <code class="language-plaintext highlighter-rouge">pB</code> will meet at the intersection. If there is no intersection, <code class="language-plaintext highlighter-rouge">pA</code> and <code class="language-plaintext highlighter-rouge">pB</code> will reach the end of the list at the same time.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getIntersectionNode</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">headA</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">headB</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">headA</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">headB</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">pA</span> <span class="o">=</span> <span class="n">headA</span>
        <span class="n">pB</span> <span class="o">=</span> <span class="n">headB</span>
        <span class="k">while</span> <span class="n">pA</span> <span class="o">!=</span> <span class="n">pB</span><span class="p">:</span>
            <span class="n">pA</span> <span class="o">=</span> <span class="n">headB</span> <span class="k">if</span> <span class="n">pA</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">pA</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">pB</span> <span class="o">=</span> <span class="n">headA</span> <span class="k">if</span> <span class="n">pB</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">pB</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">pA</span>
</code></pre></div></div>

<h2 id="2-add-two-numbers"><a name="2"></a><a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers</a></h2>

<font size="6"> Description </font>

<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>

<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>

<p>Example 1:</p>

<p><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="img" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [0], l2 = [0]
Output: [0]
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
</code></pre></div></div>

<p>Constraints:</p>

<ul>
  <li>The number of nodes in each linked list is in the range [1, 100].</li>
  <li>0 &lt;= Node.val &lt;= 9</li>
  <li>It is guaranteed that the list represents a number that does not have leading zeros.</li>
</ul>

<font size="6"> Solution </font>

<p>A simple solution is traverse the two lists and add the two numbers. The carry is passed to the next node.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> 
    <span class="k">if</span> <span class="n">s</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">-</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">l2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="n">sum_head</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">()</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">sum_head</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">l1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">l2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">val</span><span class="p">,</span> <span class="n">carry</span> <span class="o">=</span> <span class="nf">get_sum</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">carry</span><span class="p">,</span> <span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span> 
            <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">l1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">val</span><span class="p">,</span> <span class="n">carry</span> <span class="o">=</span> <span class="nf">get_sum</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">carry</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">l2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">l2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">val</span><span class="p">,</span> <span class="n">carry</span> <span class="o">=</span> <span class="nf">get_sum</span><span class="p">(</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">carry</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">carry</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sum_head</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="reflection-linked-list-problems">Reflection: Linked List Problems</h2>

<p>This is a placeholder for me to reflect what I have learned to solve the linked list problems. So far:</p>

<ul>
  <li>Two-pointer method: using two-pointer to traverse the list, one pointer is faster than the other one. This method is used to find the middle of the list, or to find the nth node from the end of the list. This can also be used to find the intersection of two lists (see problem <a href="#160">160</a> above).</li>
  <li>Need to familiar with the basic operations of linked list: insert, delete, reverse, merge, etc.
<!-- - Need to consider the last node of the list. For example, `while head is not None` is used to check if the current node is the last node of the list. We should not use `while head.next is not None` because we will miss the last node. --></li>
</ul>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Not something fancy]]></summary></entry><entry><title type="html">75 Leetcode Questions on Array</title><link href="http://localhost:4000/blog/2024/project_75_leetcode_questions_array/" rel="alternate" type="text/html" title="75 Leetcode Questions on Array" /><published>2024-11-14T00:00:00-08:00</published><updated>2024-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/project_75_leetcode_questions_array</id><content type="html" xml:base="http://localhost:4000/blog/2024/project_75_leetcode_questions_array/"><![CDATA[<p>In this project, I will try to solve 75 Leetcode questions as listed in this <a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU">link</a>.</p>

<h2 id="1-two-sum"><a href="https://leetcode.com/problems/two-sum/">1. Two Sum</a></h2>

<font size="6"> Description </font>

<p>Given an array of integers <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">target</code>, return <em>indices of the two numbers such that they add up to <code class="language-plaintext highlighter-rouge">target</code></em>.</p>

<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,2,4], target = 6
Output: [1,2]
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">],</span> <span class="n">i</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">dic</span><span class="p">[</span><span class="n">target</span> <span class="o">-</span> <span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</code></pre></div></div>

<h2 id="121-best-time-to-buy-and-sell-stock"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a></h2>

<font size="6"> Description </font>

<p>You are given an array <code class="language-plaintext highlighter-rouge">prices</code> where <code class="language-plaintext highlighter-rouge">prices[i]</code> is the price of a given stock on the <code class="language-plaintext highlighter-rouge">ith</code> day.</p>

<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>

<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code class="language-plaintext highlighter-rouge">0</code>.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
</code></pre></div></div>

<font size="6"> Solution </font>

<p><strong>Two pointers starting from both ends</strong> (i.e., move left or right pointer based on which side has a better profit)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        <span class="n">minL</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
        <span class="n">maxR</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>

        <span class="k">while</span> <span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">:</span> 
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">minL</span><span class="p">:</span> 
                <span class="n">minL</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>

            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxR</span><span class="p">:</span> 
                <span class="n">maxR</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>

            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">minL</span> <span class="o">&gt;</span> <span class="n">maxR</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span> 
                <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span> 
            <span class="k">else</span><span class="p">:</span> 
                <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span> 

        <span class="k">return</span> <span class="n">maxR</span> <span class="o">-</span> <span class="n">minL</span> <span class="k">if</span> <span class="n">maxR</span> <span class="o">&gt;=</span> <span class="n">minL</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div></div>

<p><strong>Two pointers starting from right</strong> (i.e., find highest price and then find the lowest price before it, fastest solution)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">max_profit</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">max_price</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max_price</span><span class="p">:</span>
                <span class="n">max_price</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">max_profit</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_profit</span><span class="p">,</span> <span class="n">max_price</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">max_profit</span>
</code></pre></div></div>

<p><strong>Two pointers starting from left</strong> (i.e., find lowest price and then find the highest price after it)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">min_price</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">max_profit</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">min_price</span><span class="p">:</span>
                <span class="n">min_price</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">max_profit</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_profit</span><span class="p">,</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">min_price</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">max_profit</span>
</code></pre></div></div>

<h2 id="217-contains-duplicate"><a href="https://leetcode.com/problems/contains-duplicate/">217. Contains Duplicate</a></h2>

<font size="6"> Description </font>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, return <code class="language-plaintext highlighter-rouge">true</code> if any value appears <strong>at least twice</strong> in the array, and return <code class="language-plaintext highlighter-rouge">false</code> if every element is distinct.</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">containsDuplicate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="238-product-of-array-except-self"><a href="https://leetcode.com/problems/product-of-array-except-self/">238. Product of Array Except Self</a></h2>

<font size="6"> Description </font>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, return an array <code class="language-plaintext highlighter-rouge">answer</code> such that <code class="language-plaintext highlighter-rouge">answer[i]</code> is equal to the product of all the elements of <code class="language-plaintext highlighter-rouge">nums</code> except <code class="language-plaintext highlighter-rouge">nums[i]</code>.</p>

<p>The product of any prefix or suffix of <code class="language-plaintext highlighter-rouge">nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>

<p>You must write an algorithm that runs in <code class="language-plaintext highlighter-rouge">O(n)</code> time and without using the division operation.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3,4]
Output: [24,12,8,6]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
</code></pre></div></div>

<font size="6"> Solution </font>

<p>We will use two arrays to store the product of all elements to the left and right of each element. Then, we will multiply the two arrays to get the final result.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">productExceptSelf</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">left</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">right</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">right</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">right</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))]</span>
</code></pre></div></div>

<h2 id="53-maximum-subarray"><a href="https://leetcode.com/problems/maximum-subarray/">53. Maximum Subarray</a></h2>

<font size="6"> Description </font>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>

<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1]
Output: 1
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [5,4,-1,7,8]
Output: 23
</code></pre></div></div>

<font size="6"> Solution </font>

<p>Use Kadane‚Äôs algorithm to find the maximum subarray sum. The idea is to keep track of the maximum sum of subarrays ending at each index. If the sum is negative, we reset it to 0. Refer to <a href="https://www.youtube.com/watch?v=86CQq3pKSUw">this</a> video and <a href="https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/">https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/</a> article for more details.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">accsum</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span> 
            <span class="n">accsum</span> <span class="o">+=</span> <span class="n">n</span>
            
            <span class="k">if</span> <span class="n">accsum</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">accsum</span> <span class="o">=</span> <span class="n">n</span> 
                        
            <span class="k">if</span> <span class="n">accsum</span> <span class="o">&gt;=</span> <span class="n">res</span><span class="p">:</span> 
                <span class="n">res</span> <span class="o">=</span> <span class="n">accsum</span> 

        <span class="k">return</span> <span class="n">res</span> 
</code></pre></div></div>

<p>Dynamic programming solution (from <a href="https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/">greeksforgeeks</a>)</p>

<p>Observation: <code class="language-plaintext highlighter-rouge">DP[i] = max(DP[i-1] + nums[i], nums[i])</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">DP</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">DP</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">DP</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">DP</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="152-maximum-product-subarray"><a href="https://leetcode.com/problems/maximum-product-subarray/">152. Maximum Product Subarray</a></h2>

<font size="6"> Description </font>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, find a contiguous non-empty subarray within the array that has the largest product, and return the product.</p>

<p>It is <strong>guaranteed</strong> that the answer will fit in a <strong>32-bit</strong> integer.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProduct</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">cumMax</span> <span class="o">=</span> <span class="mi">1</span> 
        <span class="n">cumMin</span> <span class="o">=</span> <span class="mi">1</span> 
        
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span> 
            
            <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
                <span class="n">cumMax</span> <span class="o">=</span> <span class="mi">1</span> 
                <span class="n">cumMin</span> <span class="o">=</span> <span class="mi">1</span> 
                <span class="k">continue</span> 
            
            <span class="n">temp</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">cumMax</span> <span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">cumMin</span> <span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
            <span class="n">cumMin</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">cumMax</span> <span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">cumMin</span> <span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
            <span class="n">cumMax</span> <span class="o">=</span> <span class="n">temp</span> 
            
            <span class="n">res</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">cumMax</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h2 id="153-find-minimum-in-rotated-sorted-array"><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">153. Find Minimum in Rotated Sorted Array</a></h2>

<font size="6"> Description </font>

<p>Suppose an array of length <code class="language-plaintext highlighter-rouge">n</code> sorted in ascending order is <strong>rotated</strong> between <code class="language-plaintext highlighter-rouge">1</code> and <code class="language-plaintext highlighter-rouge">n</code> times. For example, the array <code class="language-plaintext highlighter-rouge">nums = [0,1,2,4,5,6,7]</code> might become:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">[4,5,6,7,0,1,2]</code> if it was rotated <code class="language-plaintext highlighter-rouge">4</code> times.</li>
  <li><code class="language-plaintext highlighter-rouge">[0,1,2,4,5,6,7]</code> if it was rotated <code class="language-plaintext highlighter-rouge">7</code> times.</li>
</ul>

<p>Notice that <strong>rotating</strong> an array <code class="language-plaintext highlighter-rouge">[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code class="language-plaintext highlighter-rouge">[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>

<p>Given the sorted rotated array <code class="language-plaintext highlighter-rouge">nums</code> of <strong>unique</strong> elements, return <em>the minimum element of this array</em>.</p>

<p>You must write an algorithm that runs in <code class="language-plaintext highlighter-rouge">O(log n) time</code>.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMin</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span>
        
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="33-search-in-rotated-sorted-array"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">33. Search in Rotated Sorted Array</a></h2>

<font size="6"> Description </font>

<p>There is an integer array <code class="language-plaintext highlighter-rouge">nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>

<p>Prior to being passed to your function, <code class="language-plaintext highlighter-rouge">nums</code> is <strong>rotated</strong> at an unknown pivot index <code class="language-plaintext highlighter-rouge">k</code> (<code class="language-plaintext highlighter-rouge">0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code class="language-plaintext highlighter-rouge">[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code class="language-plaintext highlighter-rouge">[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code class="language-plaintext highlighter-rouge">3</code> and become <code class="language-plaintext highlighter-rouge">[4,5,6,7,0,1,2]</code>.</p>

<p>Given the array <code class="language-plaintext highlighter-rouge">nums</code> <strong>after</strong> the rotation and an integer <code class="language-plaintext highlighter-rouge">target</code>, return <em>the index of</em> <code class="language-plaintext highlighter-rouge">target</code> <em>if it is in</em> <code class="language-plaintext highlighter-rouge">nums</code>, <em>or</em> <code class="language-plaintext highlighter-rouge">-1</code> <em>if it is not in</em> <code class="language-plaintext highlighter-rouge">nums</code>.</p>

<p>You must write an algorithm with <code class="language-plaintext highlighter-rouge">O(log n)</code> runtime complexity.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">mid</span>
            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                    <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<h2 id="15-3sum"><a href="https://leetcode.com/problems/3sum/">15. 3Sum</a></h2>

<font size="6"> Description </font>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, return <em>all the triplets</em> <code class="language-plaintext highlighter-rouge">[nums[i], nums[j], nums[k]]</code> <em>such that</em> <code class="language-plaintext highlighter-rouge">i != j</code>, <code class="language-plaintext highlighter-rouge">i != k</code>, and <code class="language-plaintext highlighter-rouge">j != k</code>, and <code class="language-plaintext highlighter-rouge">nums[i] + nums[j] + nums[k] == 0</code>.</p>

<p>Notice that the solution set must not contain duplicate triplets.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,1,1]
Output: []
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">threeSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">nums</span><span class="p">]</span> <span class="k">if</span> <span class="nf">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">[]</span>
        
        <span class="n">nums</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>

        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">continue</span>
            
            <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>

            <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
                <span class="n">sum3</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">sum3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]])</span>
                    <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
                    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">sum3</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h2 id="11-container-with-most-water"><a href="https://leetcode.com/problems/container-with-most-water/">11. Container With Most Water</a></h2>

<font size="6"> Description </font>

<p>Given <code class="language-plaintext highlighter-rouge">n</code> non-negative integers <code class="language-plaintext highlighter-rouge">a1, a2, ..., an</code> , where each represents a point at coordinate <code class="language-plaintext highlighter-rouge">(i, ai)</code>. <code class="language-plaintext highlighter-rouge">n</code> vertical lines are drawn such that the two endpoints of the line <code class="language-plaintext highlighter-rouge">i</code> is at <code class="language-plaintext highlighter-rouge">(i, ai)</code> and <code class="language-plaintext highlighter-rouge">(i, 0)</code>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p>

<p>Notice that you may not slant the container.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: height = [1,1]
Output: 1
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxArea</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">height</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
                <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h2 id="70-climbing-stairs"><a href="https://leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a></h2>

<font size="6"> Description </font>

<p>You are climbing a staircase. It takes <code class="language-plaintext highlighter-rouge">n</code> steps to reach the top.</p>

<p>Each time you can either climb <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">2</code> steps. In how many distinct ways can you climb to the top?</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
<span class="p">1.</span> 1 step + 1 step
<span class="p">2.</span> 2 steps
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
<span class="p">1.</span> 1 step + 1 step + 1 step
<span class="p">2.</span> 1 step + 2 steps
<span class="p">3.</span> 2 steps + 1 step
</code></pre></div></div>

<font size="6"> Solution </font>

<p><strong>Key Observation</strong>: <code class="language-plaintext highlighter-rouge">DP[i] = DP[i-1] + DP[i-2]</code> which means the number of ways to reach the i-th step is the sum of the number of ways to reach the (i-1)-th step and the number of ways to reach the (i-2)-th step.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
        <span class="k">return</span> <span class="n">b</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="322-coin-change"><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a></h2>

<font size="6"> Description </font>

<p>You are given an integer array <code class="language-plaintext highlighter-rouge">coins</code> representing coins of different denominations and an integer <code class="language-plaintext highlighter-rouge">amount</code> representing a total amount of money.</p>

<p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code class="language-plaintext highlighter-rouge">-1</code>.</p>

<p>You may assume that you have an infinite number of each kind of coin.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
</code></pre></div></div>

<font size="6"> Solution </font>

<p><strong>Key Observation</strong>: <code class="language-plaintext highlighter-rouge">DP[i] = min(DP[i-c1], DP[i-c2], ...) + 1</code> which means the minimum number of coins to make up the amount i is the minimum number of coins to make up the amount i-c1, i-c2, ‚Ä¶ plus 1.</p>

<p>This problem can be visualized as a tree with the root node as the amount and the children nodes as the amount - coin values. The problem is to find the shortest path from the root to the target amount.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">coinChange</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">coins</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">amount</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">BIG_NUM</span> <span class="o">=</span> <span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">BIG_NUM</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">amount</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">amount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
            <span class="k">return</span> <span class="mi">0</span> 
        
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">amount</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">coins</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">amount</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">c</span><span class="p">])</span>
        
        <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">]</span> <span class="o">==</span> <span class="n">BIG_NUM</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> 
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="300-longest-increasing-subsequence"><a href="https://leetcode.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence</a></h2>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, return the length of the longest strictly increasing subsequence.</p>

<p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code class="language-plaintext highlighter-rouge">[3,6,2,7]</code> is a subsequence of the array <code class="language-plaintext highlighter-rouge">[0,3,1,6,2,2,7]</code>.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,1,0,3,2,3]
Output: 4
</code></pre></div></div>

<font size="6"> Solution </font>

<p><strong>Key Observation</strong>:</p>

<ul>
  <li>When considering the i-th element, we need to find the longest increasing subsequence that ends with <code class="language-plaintext highlighter-rouge">nums[i]</code>.</li>
  <li>Straightforward case is when nums[i] is the largest element, then the longest `dp[i] = dp[i-1] + 1</li>
  <li>The addition of nums[i] to the subsequence causes the change of all previous <code class="language-plaintext highlighter-rouge">dp[j]</code> where <code class="language-plaintext highlighter-rouge">nums[j] &lt; nums[i]</code>.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">lengthOfLIS</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> 

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="139-word-break"><a href="https://leetcode.com/problems/word-break/">139. Word Break</a></h2>

<p>Given a string <code class="language-plaintext highlighter-rouge">s</code> and a dictionary of strings <code class="language-plaintext highlighter-rouge">wordDict</code>, return <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>

<p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
</code></pre></div></div>

<p>Example 3:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wordBreak</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">_valid</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">):</span>

        <span class="n">is_detect</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">wordDict</span><span class="p">:</span>  
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> 
                <span class="k">continue</span>
            <span class="k">elif</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">s</span><span class="p">:</span> 
                    <span class="n">is_detect</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># if word appear in the top of the string s 
</span>                <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">s</span><span class="p">[:</span><span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)]:</span>
                    <span class="k">return</span> <span class="nf">_valid</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">):],</span> <span class="n">wordDict</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">is_detect</span>
    
    <span class="k">return</span> <span class="nf">_valid</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wordBreak</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    
    <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span> 
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordDict</span><span class="p">:</span> 
            <span class="c1"># check whether the word w in the head of the sub string s 
</span>            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:]):</span>
                <span class="k">if</span> <span class="n">w</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nf">len</span><span class="p">(</span><span class="n">w</span><span class="p">)]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">any</span><span class="p">([</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="nf">len</span><span class="p">(</span><span class="n">w</span><span class="p">)],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
    
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="377-combination-sum-iv"><a href="https://leetcode.com/problems/combination-sum-iv/">377. Combination Sum IV</a></h2>

<p>Given an array of distinct integers <code class="language-plaintext highlighter-rouge">nums</code> and a target integer <code class="language-plaintext highlighter-rouge">target</code>, return the number of possible combinations that add up to <code class="language-plaintext highlighter-rouge">target</code>.</p>

<p>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3, 1)
(2, 1, 1)
(2, 2, 1)
(3, 1, 1)
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9], target = 3
Output: 0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">combinationSum4</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
         
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">target</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span> 
                <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">num</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="198-house-robber"><a href="https://leetcode.com/problems/house-robber/">198. House Robber</a></h2>

<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>

<p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,7,9,3,1]
Output: 12
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">cur</span><span class="p">,</span> <span class="n">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> 

        <span class="c1"># [pre, cur, n, n+1, ...]
</span>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span> 
            <span class="n">temp</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">pre</span> <span class="o">+</span> <span class="n">n</span><span class="p">,</span> <span class="n">cur</span><span class="p">)</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span> 
            <span class="n">cur</span> <span class="o">=</span> <span class="n">temp</span> 
        
        <span class="k">return</span> <span class="n">cur</span> 
</code></pre></div></div>

<h2 id="213-house-robber-ii"><a href="https://leetcode.com/problems/house-robber-ii/">213. House Robber II</a></h2>

<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>

<p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">_rob</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
        <span class="n">cur</span><span class="p">,</span> <span class="n">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> 

        <span class="c1"># [pre, cur, n, n+1, ...]
</span>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">pre</span> <span class="o">+</span> <span class="n">n</span><span class="p">,</span> <span class="n">cur</span><span class="p">)</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span> 
            <span class="n">cur</span> <span class="o">=</span> <span class="n">temp</span> 
        
        <span class="k">return</span> <span class="n">cur</span> 
    
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="nf">_rob</span><span class="p">(</span><span class="n">nums</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span> <span class="nf">_rob</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">:]))</span>
</code></pre></div></div>

<h2 id="62-unique-paths"><a href="https://leetcode.com/problems/unique-paths/">62. Unique Paths</a></h2>

<p>There is a robot on an <code class="language-plaintext highlighter-rouge">m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code class="language-plaintext highlighter-rouge">grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code class="language-plaintext highlighter-rouge">grid[m-1][n-1]</code>). The robot can only move either down or right at any point in time.</p>

<p>Given the two integers <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: m = 3, n = 7
Output: 28
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">uniquePaths</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
    <span class="c1"># set the last row and last col to be 1 
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> 
        <span class="n">grid</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span> 
        <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span> 
            <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="55-jump-game"><a href="https://leetcode.com/problems/jump-game/">55. Jump Game</a></h2>

<p>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code>. You are initially positioned at the array‚Äôs first index, and each element in the array represents your maximum jump length at that position.</p>

<p>Return <code class="language-plaintext highlighter-rouge">true</code> if you can reach the last index, or <code class="language-plaintext highlighter-rouge">false</code> otherwise.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,1,1,4]
Output: true
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">canJump</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span> <span class="c1"># start at len(nums)-2, stop at 0 
</span>            <span class="c1"># any(dp[i + 0], dp[i + 1], ..., dp[i + nums[i]]) 
</span>            <span class="n">furthest</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">furthest</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
</code></pre></div></div>

<h2 id="133-clone-graph"><a href="https://leetcode.com/problems/clone-graph/">133. Clone Graph</a></h2>

<p>Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph.</p>

<p>Each node in the graph contains a value (int) and a list of its neighbors.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="n">public</span> <span class="nb">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">neighbors</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Test case:</p>

<ul>
  <li>An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</li>
</ul>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
</code></pre></div></div>

<h2 id="207-course-schedule"><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a></h2>

<p>There are a total of <code class="language-plaintext highlighter-rouge">numCourses</code> courses you have to take, labeled from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">numCourses - 1</code>. You are given an array <code class="language-plaintext highlighter-rouge">prerequisites</code> where <code class="language-plaintext highlighter-rouge">prerequisites[i] = [ai, bi]</code> indicates that you must take course <code class="language-plaintext highlighter-rouge">bi</code> first if you want to take course <code class="language-plaintext highlighter-rouge">ai</code>.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">canFinish</span><span class="p">(</span><span class="n">numCourses</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">prerequisites</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="n">mapPre</span> <span class="o">=</span> <span class="p">{</span><span class="n">c</span><span class="p">:[]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">numCourses</span><span class="p">)}</span>
    <span class="k">for</span> <span class="n">c</span><span class="p">,</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prerequisites</span><span class="p">:</span>
        <span class="n">mapPre</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    
    <span class="n">visited</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">if</span> <span class="n">mapPre</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="p">[]:</span>
            <span class="k">return</span> <span class="bp">True</span> 

        <span class="n">visited</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mapPre</span><span class="p">[</span><span class="n">c</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">else</span><span class="p">:</span> 
                <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">dfs</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
        
        <span class="n">mapPre</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">del</span> <span class="n">visited</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="k">return</span> <span class="nf">all</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
    
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="nf">dfs</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span><span class="p">,</span><span class="n">p</span> <span class="ow">in</span> <span class="n">prerequisites</span><span class="p">]</span>
    <span class="k">return</span> <span class="nf">all</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="417-pacific-atlantic-water-flow"><a href="https://leetcode.com/problems/pacific-atlantic-water-flow/">417. Pacific Atlantic Water Flow</a></h2>

<p>There is an <code class="language-plaintext highlighter-rouge">m x n</code> rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island‚Äôs left and top edges, and the Atlantic Ocean touches the island‚Äôs right and bottom edges.</p>

<p>The island is partitioned into a grid of square cells. You are given an <code class="language-plaintext highlighter-rouge">m x n</code> integer matrix <code class="language-plaintext highlighter-rouge">heights</code> where <code class="language-plaintext highlighter-rouge">heights[r][c]</code> represents the height above sea level of the cell at coordinate <code class="language-plaintext highlighter-rouge">(r, c)</code>.</p>

<p>The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell‚Äôs height is less than or equal to the current cell‚Äôs height. Water can flow from any cell adjacent to an ocean into the ocean.</p>

<p>Return a 2D list of grid coordinates <code class="language-plaintext highlighter-rouge">result</code> where <code class="language-plaintext highlighter-rouge">result[i] = [ri, ci]</code> denotes that rain water can flow from cell <code class="language-plaintext highlighter-rouge">(ri, ci)</code> to both the Pacific and Atlantic oceans.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">pacificAtlantic</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">heights</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">heights</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">po_map</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span> 
        <span class="n">ao_map</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>

        <span class="n">po_map</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="n">ao_map</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="n">po_map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
            <span class="n">ao_map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
        
        <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span> 
            <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">return</span> <span class="bp">True</span> 

        <span class="k">def</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">,</span> <span class="n">flow_map</span><span class="p">):</span>
            <span class="c1"># going reverse flow 
</span>            <span class="c1"># if lower --&gt; stop 
</span>            <span class="c1"># if higher --&gt; mark as 1, mark as visited 
</span>            <span class="c1"># directions [up, down, left, right]
</span>            <span class="n">ds</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>

            <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ds</span><span class="p">:</span>
                <span class="n">r_</span><span class="p">,</span> <span class="n">c_</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">):</span> 
                    <span class="k">continue</span> 
                
                <span class="k">if</span> <span class="n">flow_map</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">continue</span>

                <span class="k">if</span> <span class="n">heights</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">heights</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]:</span> 
                    <span class="n">flow_map</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
                    <span class="n">flow_map</span> <span class="o">=</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">,</span> <span class="n">flow_map</span><span class="p">)</span>
            
            <span class="k">return</span> <span class="n">flow_map</span> 
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">po_map</span> <span class="o">=</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">po_map</span><span class="p">)</span>
            <span class="n">ao_map</span> <span class="o">=</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">,</span> <span class="n">ao_map</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="n">po_map</span> <span class="o">=</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">po_map</span><span class="p">)</span>
            <span class="n">ao_map</span> <span class="o">=</span> <span class="nf">reverse_flow</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ao_map</span><span class="p">)</span>
        
        <span class="c1"># merge two map 
</span>        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">po_map</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">ao_map</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h2 id="200-number-of-islands"><a href="https://leetcode.com/problems/number-of-islands/">200. Number of Islands</a></h2>

<p>Given an m x n 2D binary grid grid which represents a map of ‚Äò1‚Äôs (land) and ‚Äò0‚Äôs (water), return the number of islands.</p>

<p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">numIslands</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">visited</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>

        <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span> 
            <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">return</span> <span class="bp">True</span> 

        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">ni</span><span class="p">):</span> 

            <span class="c1"># directions [up, down, left, right]
</span>            <span class="n">ds</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>

            <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span> 
            
            <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span> 
            
            <span class="n">visited</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
            <span class="n">ni</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ds</span><span class="p">:</span> 
                <span class="n">r_</span><span class="p">,</span> <span class="n">c_</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

                <span class="k">if</span> <span class="ow">not</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">):</span> 
                    <span class="k">continue</span> 
                
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">:</span>
                    <span class="k">continue</span> 

                <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">continue</span> 

                <span class="c1">#  grid[r_][c_] == "1" and not visited 
</span>                <span class="c1"># print(r, c, r_, c_, ni, visited)
</span>                <span class="n">ni</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">,</span> <span class="n">ni</span><span class="p">)</span>

            <span class="k">return</span> <span class="n">ni</span> 
        
        <span class="n">num_islands</span> <span class="o">=</span> <span class="mi">0</span> 

        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span> 
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> 

                <span class="n">num_islands</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span> 

        <span class="k">return</span> <span class="n">num_islands</span> 
</code></pre></div></div>

<h2 id="212-word-search-ii"><a href="https://leetcode.com/problems/word-search-ii/">212. Word Search II</a></h2>

<p>Given an <code class="language-plaintext highlighter-rouge">m x n</code> board of characters <code class="language-plaintext highlighter-rouge">board</code> and a list of strings <code class="language-plaintext highlighter-rouge">words</code>, return all words on the board.</p>

<p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>

<p>Example 1:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">findWords</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>

    <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">:</span> 
            <span class="k">return</span> <span class="bp">False</span> 
        <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span> 
            <span class="k">return</span> <span class="bp">False</span> 
        <span class="k">return</span> <span class="bp">True</span> 

    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">cur_i</span><span class="p">,</span> <span class="n">found_next_word</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>
        <span class="n">directions</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>

        <span class="c1"># reach the last character 
</span>        <span class="k">if</span> <span class="n">cur_i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">found_next_word</span><span class="p">,</span> <span class="n">visited</span>

        <span class="n">found_cur_word</span> <span class="o">=</span> <span class="bp">False</span> 

        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">directions</span><span class="p">:</span> 
            <span class="n">r_</span><span class="p">,</span> <span class="n">c_</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">):</span>
                <span class="k">continue</span> 

            <span class="nf">if </span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">==</span> <span class="n">word</span><span class="p">[</span><span class="n">cur_i</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]):</span>
                <span class="n">found_cur_word</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">r_</span><span class="p">][</span><span class="n">c_</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">temp</span><span class="p">,</span> <span class="n">visited</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r_</span><span class="p">,</span> <span class="n">c_</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">cur_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">visited</span><span class="p">)</span>
                <span class="n">found_next_word</span> <span class="o">=</span> <span class="nf">all</span><span class="p">([</span><span class="n">temp</span><span class="p">,</span> <span class="n">found_next_word</span><span class="p">])</span>
        
        <span class="k">if</span> <span class="n">found_cur_word</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">found_next_word</span><span class="p">,</span> <span class="n">visited</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="n">visited</span>

    <span class="k">def</span> <span class="nf">findWord</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>

        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                    <span class="n">copy_visited</span> <span class="o">=</span> <span class="n">visited</span>
                    <span class="n">copy_visited</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">found</span><span class="p">,</span> <span class="n">copy_visited</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">word</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="n">copy_visited</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">found</span><span class="p">:</span> 
                        <span class="k">return</span> <span class="bp">True</span> 
        
        <span class="k">return</span> <span class="bp">False</span>

    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span> 
        <span class="k">if</span> <span class="nf">findWord</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
            <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>

<h2 id="73-set-matrix-zeroes"><a href="https://leetcode.com/problems/set-matrix-zeroes/">73. Set Matrix Zeroes</a></h2>

<p>Given an <code class="language-plaintext highlighter-rouge">m x n</code> integer matrix <code class="language-plaintext highlighter-rouge">matrix</code>, if an element is <code class="language-plaintext highlighter-rouge">0</code>, set its entire row and column to <code class="language-plaintext highlighter-rouge">0</code>‚Äôs.</p>

<p>You must do it in place.</p>

<p>Example 1:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
</code></pre></div></div>

<font size="6"> Solution </font>

<p>Key idea is to use the first row and first column as the marker to indicate if the row or column should be set to 0. 
However, we need to be careful when the first row itself contains a 0.</p>

<ul>
  <li>To handle this case, we need a flag <code class="language-plaintext highlighter-rouge">rowZERO</code> to indicate if the first row itself contains a 0.</li>
  <li>We iterate columns from right to left to avoid overwriting the marker.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">setZeroes</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Do not return anything, modify matrix in-place instead.
        </span><span class="sh">"""</span>
        <span class="n">ROWS</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">COLS</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">rowZERO</span> <span class="o">=</span> <span class="bp">False</span> 

        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ROWS</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">COLS</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> 
                        <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                        <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">rowZERO</span> <span class="o">=</span> <span class="bp">True</span> 
                        <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

        
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">ROWS</span><span class="p">):</span> 
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">COLS</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        

        <span class="k">if</span> <span class="n">rowZERO</span><span class="p">:</span> 
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">COLS</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<h2 id="54-spiral-matrix"><a href="https://leetcode.com/problems/spiral-matrix/">54. Spiral Matrix</a></h2>

<p>Given an <code class="language-plaintext highlighter-rouge">m x n</code> matrix, return all elements of the matrix in spiral order.</p>

<p>Example 1:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
</code></pre></div></div>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">spiralOrder</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">def</span> <span class="nf">move_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="o">+</span><span class="mi">1</span>
        
        <span class="k">def</span> <span class="nf">move_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="o">-</span><span class="mi">1</span>
        
        <span class="k">def</span> <span class="nf">move_up</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">c</span>
        
        <span class="k">def</span> <span class="nf">move_down</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">c</span>
        
        <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">direction</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_right</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">move_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_down</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">move_down</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_up</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">move_up</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_left</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">move_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span> 
                <span class="k">raise</span> <span class="nb">ValueError</span>
        
        <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">top_row</span> <span class="ow">or</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">bot_row</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">left_col</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="n">right_col</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span> 
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">def</span> <span class="nf">change_direction</span><span class="p">(</span><span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_right</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">move_down</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">bot_row</span>
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_down</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">move_left</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span>
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_left</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">move_up</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span> <span class="o">-</span> <span class="mi">1</span> 
            <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="sh">'</span><span class="s">move_up</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">move_right</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span> 
        
        
        <span class="k">def</span> <span class="nf">next_move</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">):</span>
            <span class="n">temp_r</span><span class="p">,</span> <span class="n">temp_c</span> <span class="o">=</span> <span class="nf">move</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">direction</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">valid</span><span class="p">(</span><span class="n">temp_r</span><span class="p">,</span> <span class="n">temp_c</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">change_direction</span><span class="p">(</span><span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">)</span>
                
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">direction</span> <span class="o">=</span> <span class="sh">'</span><span class="s">move_right</span><span class="sh">'</span>
        <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> 

        <span class="n">ROWS</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">COLS</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">left_col</span> <span class="o">=</span> <span class="mi">0</span> 
        <span class="n">right_col</span> <span class="o">=</span> <span class="n">COLS</span> <span class="o">-</span> <span class="mi">1</span> 
        <span class="n">top_row</span> <span class="o">=</span> <span class="mi">0</span> 
        <span class="n">bot_row</span> <span class="o">=</span> <span class="n">ROWS</span> <span class="o">-</span> <span class="mi">1</span> 

        <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ROWS</span> <span class="o">*</span> <span class="n">COLS</span><span class="p">:</span>
            <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">])</span>
            <span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span> <span class="o">=</span> <span class="nf">next_move</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">direction</span><span class="p">,</span> <span class="n">left_col</span><span class="p">,</span> <span class="n">right_col</span><span class="p">,</span> <span class="n">top_row</span><span class="p">,</span> <span class="n">bot_row</span><span class="p">)</span>
            <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="nf">move</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">direction</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">output</span> 
</code></pre></div></div>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Not something fancy]]></summary></entry><entry><title type="html">Hackerrank Questions</title><link href="http://localhost:4000/blog/2024/project_hackerrank/" rel="alternate" type="text/html" title="Hackerrank Questions" /><published>2024-11-14T00:00:00-08:00</published><updated>2024-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/2024/project_hackerrank</id><content type="html" xml:base="http://localhost:4000/blog/2024/project_hackerrank/"><![CDATA[<p>In this project, I will try to solve Hackerrank problems using Python. I started with the <a href="https://www.hackerrank.com/interview/preparation-kits/one-week-preparation-kit/one-week-day-one/challenges">‚ÄúOne week Preparation Kit‚Äù</a> with total 21 problems and 7 mock tests.</p>

<h2 id="tower-breakers"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-tower-breakers-1/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-three">Tower Breakers</a></h2>

<font size="6"> Description </font>

<p>Two players are playing a game of Tower Breakers! Player \(1\) always moves first, and both players always play optimally. The rules of the game are as follows:</p>

<ul>
  <li>Initially there are \(n\) towers.</li>
  <li>Each tower is of height \(m\).</li>
  <li>The players move in alternating turns.</li>
  <li>In each turn, a player can choose a tower of height \(x\) and reduce its height to \(y\), where \(y\) and \(x\) evenly divides (i.e. \(x \% y = 0\)) and \(1 \leq y &lt; x\).</li>
  <li>If the current player is unable to make a move, they lose the game.</li>
</ul>

<p>Given the values of \(n\) and \(m\), determine which player will win. If the first player wins, return \(1\). Otherwise, return \(2\).</p>

<font size="6"> Solution </font>

<p>Some observations:</p>

<ul>
  <li>Regardless the height of a tower, the player can always reduce it to \(1\) and make it out of the games.
<!-- - If the height of a tower is an even number (except 2), the player can always have at least two choices, i.e., reduce it to $$1$$ or $$2$$. If reduce to $$2$$ then it is still a valid tower but only 1 move left. -->
<!-- - Let's define a winning move is a move that reduce the height of a tower to $$1$$, i.e., the tower is out of the game. -->
<!-- - So if the height of a towers is an even number (except 2), we can consider one or two winning moves, otherwise, it is only one winning move. --></li>
  <li>If there are only 2 towers with even height, the second player can always adjust the height of the towers to be the same so that the total winning moves after his move is even number. So the first player will lose.</li>
  <li>Similarly if there are only 2 towers with odd height, the second player can also adjust the height and win.</li>
  <li>In general, if there are even number of towers with the same height (i.e., number of winning moves), the second player will win.</li>
</ul>

<p>Given the above obseravtions, let‚Äôs work out strategy for the first player.</p>

<ul>
  <li>If $n$ is odd, P1 plays the first move to reduce the height of the first tower to 1. The number of towers left is even, so P1 will win.</li>
  <li>If $n$ is even, P1 always lose because P2 can always adjust the height of the towers to be the same and the number of towers left is even.</li>
</ul>

<p>Consider example:</p>

<!-- - $n=2$ and $m=2$. The total winning moves is 2, so the first player will lose.
- $n=2$ and $m=3$. The total winning moves is also 2, so the first player will lose. -->
<ul>
  <li>$n=2$ and $m=4$. If the first layer reduce the height of towers to [2, 4]. The total winning moves can be [1, 2] or [1, 1]. So the player 2 will choose the first option [1, 2] and win the game. Here is the game: P1 [2, 4] -&gt; P2 [2, 2] -&gt; P1 [1, 2] -&gt; P2 [1, 1], player 2 win. The other scenarios will lead to the same result. P1 [1, 4] -&gt; P2 [1, 1], player 2 win.</li>
  <li>$n=3$ and $m=3$. The total winning moves is 3, so the first player will win. [3, 3, 3] -&gt; P1 [1, 3, 3] -&gt; P2 [1, 1, 3] -&gt; P1 [1, 1, 1]. or [3, 3, 3] -&gt; P1 [1, 3, 3] -&gt; P2 [1, 2, 3] -&gt; P1 [1, 2, 2] -&gt; P2 [1, 1, 2] -&gt; P1 [1, 1, 1], player 1 win.</li>
  <li>$n=3$ and $m=4$. The total winning moves is 6, so the play 2 win.
    <ul>
      <li>[4, 4, 4] -&gt; P1 [1, 4, 4] -&gt; P2 [1, 2, 4] -&gt; P1 [1, 2, 2]</li>
    </ul>
  </li>
</ul>

<p>Exception:</p>

<ul>
  <li>when $n=1$, the first player will win regardless the height of the tower because he can always reduce it to 1, except when $m=1$.</li>
  <li>when $m=1$, the first player will lose regardless the number of towers because he can not make any move.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">towerBreakers</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">2</span>
    
    <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">2</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="caesar-cipher"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-caesar-cipher-1/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-three">Caesar Cipher</a></h2>

<font size="6"> Description </font>

<p>Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar‚Äôs cipher shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Original alphabet:      abcdefghijklmnopqrstuvwxyz
Alphabet rotated +3:    defghijklmnopqrstuvwxyzabc
</code></pre></div></div>

<p>For example, the given cleartext \(s = There's-a-starman-waiting-in-the-sky\) and the alphabet is rotated by \(k = 3\). The encrypted string is \(Wkhuh'v-d-vwdupdq-zdlwlqj-lq-wkh-vnb\).</p>

<p>Note: The cipher only encrypts letters; symbols, such as -, remain unencrypted.</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">caesarCipher</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="n">alphabet</span> <span class="o">=</span> <span class="sh">'</span><span class="s">abcdefghijklmnopqrstuvwxyz</span><span class="sh">'</span>
    <span class="n">length_alphabet</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">alphabet</span><span class="p">)</span>
    <span class="n">shift</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">length_alphabet</span>
    <span class="n">shifted_alphabet</span> <span class="o">=</span> <span class="n">alphabet</span> <span class="o">+</span> <span class="n">alphabet</span>
    <span class="n">shifted_alphabet</span> <span class="o">=</span> <span class="n">shifted_alphabet</span><span class="p">[</span><span class="n">shift</span><span class="p">:</span><span class="n">shift</span><span class="o">+</span><span class="n">length_alphabet</span><span class="p">]</span>
    <span class="n">map_dict</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">old</span><span class="p">,</span> <span class="n">new</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">alphabet</span><span class="p">,</span> <span class="n">shifted_alphabet</span><span class="p">):</span>
        <span class="n">map_dict</span><span class="p">[</span><span class="n">old</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span>
        <span class="n">map_dict</span><span class="p">[</span><span class="n">old</span><span class="p">.</span><span class="nf">upper</span><span class="p">()]</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>
        
    <span class="n">output</span> <span class="o">=</span> <span class="sh">''</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">map_dict</span><span class="p">:</span>
            <span class="n">output</span> <span class="o">+=</span> <span class="n">map_dict</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">output</span> <span class="o">+=</span> <span class="n">c</span>
    
    <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>

<h2 id="palindrome-index"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-palindrome-index/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-three">Palindrome Index</a></h2>

<font size="6"> Description </font>

<p>Given a string of lowercase letters in the range \(ascii[a-z]\), determine a character that can be removed to make the string a palindrome. There may be more than one solution, but any will do. For example, if \(s = bcbc\), we can either remove \(b\) at index \(0\) or \(c\) at index \(3\). If the word is already a palindrome or there is no solution, return \(-1\). Otherwise, return the index of a character to remove.</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">palindromeIndex</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="grid-challenge"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-grid-challenge/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-four">Grid Challenge</a></h2>

<font size="6"> Description </font>

<p>Given a square grid of characters in the range ascii[a-z], rearrange elements of each row alphabetically, ascending. Determine if the columns are also in ascending alphabetical order, top to bottom. Return YES if they are or NO if they are not.</p>

<p>For example, given the grid <code class="language-plaintext highlighter-rouge">grid=['abc', 'ade', 'efg']</code></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a b c
a d e
e f g
</code></pre></div></div>

<p>The rows are already in alphabetical order. The columns \(a\), \(a\), and \(e\) are also in alphabetical order, so the answer would be YES. Only elements within the same row can be rearranged. They cannot be moved to a different row.</p>

<font size="6"> Solution </font>

<p>Map each character to an integer, sort each row, then calculate the different (gradient) between two adjacent characters in each row. If the gradient is negative, then the row is not in ascending order. If all rows are in ascending order, then check the columns.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gridChallenge</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">grid_int</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">:</span>
        <span class="n">grid_int</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="nf">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">row</span><span class="p">])</span>
    
    <span class="c1"># sorting
</span>    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid_int</span><span class="p">:</span>
        <span class="n">row</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid_int</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">NO</span><span class="sh">'</span>
    
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">grid_int</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">grid_int</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">NO</span><span class="sh">'</span>
    
    <span class="k">return</span> <span class="sh">'</span><span class="s">YES</span><span class="sh">'</span>
</code></pre></div></div>

<p>Another solution is convert to 2D numpy array (but Hackerrank does not support numpy!)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gridChallenge</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">grid_int</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">:</span>
        <span class="n">grid_int</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="nf">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">row</span><span class="p">])</span>
    
    <span class="n">grid_int</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">grid_int</span><span class="p">)</span>
    <span class="n">grid_int</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">grid_int</span><span class="p">,</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>

    <span class="c1"># sorting
</span>    <span class="n">grid_int</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">row_diff</span> <span class="o">=</span> <span class="n">grid_int</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">grid_int</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">any</span><span class="p">(</span><span class="n">row_diff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">NO</span><span class="sh">'</span>
    <span class="n">col_diff</span> <span class="o">=</span> <span class="n">grid_int</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">grid_int</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>
    <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">any</span><span class="p">(</span><span class="n">col_diff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">NO</span><span class="sh">'</span>
    <span class="k">return</span> <span class="sh">'</span><span class="s">YES</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="recursive-digit-sum"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-recursive-digit-sum/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-four">Recursive Digit Sum</a></h2>

<font size="6"> Description </font>

<p>We define super digit of an integer \(x\) using the following rules:</p>

<ul>
  <li>If \(x\) has only \(1\) digit, then its super digit is \(x\).</li>
  <li>Otherwise, the super digit of \(x\) is equal to the super digit of the digit-sum of \(x\). Here, digit-sum of a number is defined as the sum of its digits.</li>
</ul>

<p>For example, super digit of \(x=9875\) will be calculated as:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	super_digit(9875)   9+8+7+5 = 29 
	super_digit(29) 	2 + 9 = 11
	super_digit(11)		1 + 1 = 2
	super_digit(2)		= 2 
</code></pre></div></div>

<p>You are given two numbers \(n\) and \(k\). You have to calculate the super digit of \(P\). \(P\) is created when number \(n\) is concatenated \(k\) times. That is, if \(n=9875\) and \(k=4\), then \(P=9875987598759875\).</p>

<font size="6"> Solution </font>

<p>Some observations:</p>

<ul>
  <li>The super digit of \(P\) is the super digit of the super digit of \(n\) multiplied by \(k\).</li>
  <li>We can recursively calculate the super digit of \(n\) until it has only one digit.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">superDigit</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">digit_sum</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">([</span><span class="nf">int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">n</span><span class="p">])</span>
        <span class="k">return</span> <span class="nf">superDigit</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">digit_sum</span> <span class="o">*</span> <span class="n">k</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="new-year-chaos"><a href="https://www.hackerrank.com/challenges/one-week-preparation-kit-new-year-chaos/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=preparation-kits&amp;playlist_slugs%5B%5D=one-week-preparation-kit&amp;playlist_slugs%5B%5D=one-week-day-four">New Year Chaos</a></h2>

<font size="6"> Description </font>

<p>It‚Äôs New Year‚Äôs Day and everyone‚Äôs in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by \(1\) from \(1\) at the front of the line to \(n\) at the back.</p>

<p>Any person in the queue can bribe the person directly in front of them to swap positions. If two people swap positions, they still wear the same sticker denoting their original places in line. One person can bribe at most two others. For example, if \(n=8\) and \(Person 5\) bribes \(Person 4\), the queue will look like this: \(1,2,3,5,4,6,7,8\).</p>

<p>Fascinated by this chaotic queue, you decide you must know the minimum number of bribes that took place to get the queue into its current state!</p>

<p>Examples:</p>

<ul>
  <li>\(q=[1,2,3,5,4,6,7,8]\) If person \(5\) bribes person \(4\), the queue will look like this: \(1,2,3,5,4,6,7,8\). Only \(1\) bribe is required. Print 1.</li>
  <li>\(q=[4,1,2,3]\) Too chaotic: more than \(2\) bribes required. Print Too chaotic.</li>
</ul>

<font size="6"> Solution </font>

<p>Some observations: Let‚Äôs consider <code class="language-plaintext highlighter-rouge">q=[1, 2, 5, 3, 7, 8, 6, 4]</code></p>

<ul>
  <li>Any one can bribe the person directly in front of them to swap positions. So \(P5\) can bribe \(P3\) to swap positions. And this bribe is counted as 1 only.</li>
  <li>\(P8\) can bribe \(P6\) and \(P4\) to swap positions. And this bribe is counted as 2 only.</li>
  <li>Even the \(P4\) is in position 8 at first (i.e., 4 positions away from his correct position), he no need any bribe to get to his correct position. Because along the bribing process of \(P8\) and \(P7\), \(P5\), he will be pushed to his correct position.</li>
  <li>\(P5\) always need to swap positions to $P3\(and\)P4$$ to get to his correct position. The number of bribes for a person is the number of people in front of him that are smaller than him.</li>
</ul>

<p>So the idea is to find the one in the wrong position and count number of people in front of him that are smaller than him. For example, \(P5\) is in the wrong position and there are 2 people in front of him that are smaller than him, so the total brides for him is 2. The total brides for the whole queue is the sum of brides for each person. The queue is too chaotic if any person in wrong position and located in number less than 2 positions away from his correct position.
(Update: This approach is not correct! I will go back to this problem later!)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minimumBribes</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">is_chaotic</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">n</span><span class="p">:</span> <span class="c1"># wrong position
</span>            <span class="n">sub_total</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
                    <span class="n">sub_total</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">sub_total</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">is_chaotic</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">total</span> <span class="o">+=</span> <span class="n">sub_total</span>
    <span class="k">if</span> <span class="n">is_chaotic</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Too chaotic</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</code></pre></div></div>

<p>Another solution is use bubble sort to sort and count the number of swaps. But this solution is not efficient enough to pass the time limit (This method works but slow!)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minimumBribes</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">is_chaotic</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">count</span><span class="p">[</span><span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">total</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">count</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">is_chaotic</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">break</span>
    <span class="k">if</span> <span class="n">is_chaotic</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Too chaotic</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="truck-tour"><a href="https://www.hackerrank.com/challenges/truck-tour/problem">Truck Tour</a></h2>

<font size="6"> Description </font>

<p>Suppose there is a circle. There are \(N\) petrol pumps on that circle. Petrol pumps are numbered \(0\) to \((N-1)\) (both inclusive). You have two pieces of information corresponding to each of the petrol pump: (1) the amount of petrol that particular petrol pump will give, and (2) the distance from that petrol pump to the next petrol pump.</p>

<p>Initially, you have a tank of infinite capacity carrying no petrol. You can start the tour at any of the petrol pumps. Calculate the first point from where the truck will be able to complete the circle. Consider that the truck will stop at each of the petrol pumps. The truck will move one kilometer for each litre of the petrol.</p>

<p>Sample Input</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3 # N
1 5 # pump 1: petrol, distance 
10 3 # pump 2: petrol, distance
3 4 # pump 3: petrol, distance
</code></pre></div></div>

<font size="6"> Solution </font>

<p>Clarification:</p>

<ul>
  <li>Output: An integer which will be the smallest index of the petrol pump from which we can start the tour.</li>
  <li>There is guaranteed to be a unique solution.</li>
</ul>

<p>Some observations:</p>

<ul>
  <li>The truck has infinite tank capacity. So it should get petrol at every pump.</li>
  <li>Given the above example, let‚Äôs work out each scenario:
    <ul>
      <li>If starting at \(P0\), its petro \(p=1\), while the distance to the next pump is $d=5$. So the truck will run out of petrol at \(P1\). So we can not start at \(P0\).</li>
      <li>If starting at \(P1\), its petro \(10\), \(d=3\). It has \(7\) petrol left after reaching \(P2\). It then loads \(p=P1+P2-d1\) while the distance is \(d2\).</li>
    </ul>
  </li>
  <li>The petrol will be cummulatively added, if starting from $P0$, at pump $t$-th, the petro is  \(p_t=P0 - d0 + P1 - d1 + ... + P_t\), and the condition at each pump is \(p_t \geq d_t\).</li>
  <li>If the truck starts at pump $s$ (shifted), the petro at pump $t$-th is \(p_t=P_s - d_s + P_{s+1} - d_{s+1} + ... + P_{s+t}\), and the condition at each pump is \(p_t \geq d_t\). The condition is satisfied if \(p_t - d_t \geq 0\) for all \(t\)</li>
  <li>We need to compare element-wise of two lists: petro at time $t$ and distance at time $t$. If the petro is always greater than or equal to the distance, then we can start at that pump. The first pump that satisfies the condition is the answer.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">truckTour</span><span class="p">(</span><span class="n">petrolpumps</span><span class="p">):</span>
    <span class="c1"># Write your code here 
</span>    <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">petrolpumps</span><span class="p">)</span>
    <span class="n">petro</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">p</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">petrolpumps</span><span class="p">:</span>
        <span class="n">petro</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">distance</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="n">petro</span> <span class="o">=</span> <span class="n">petro</span> <span class="o">+</span> <span class="n">petro</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">distance</span> <span class="o">+</span> <span class="n">distance</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">cum_petro</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">):</span>
            <span class="n">cum_petro</span> <span class="o">+=</span> <span class="n">petro</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">distance</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">cum_petro</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="n">cum_petrol</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">i</span>
</code></pre></div></div>

<h2 id="merge-two-sorted-linked-lists"><a href="https://www.hackerrank.com/challenges/merge-two-sorted-linked-lists/problem">Merge two sorted linked lists</a></h2>

<font size="6"> Description </font>

<p>You‚Äôre given the pointer to the head nodes of two sorted linked lists. The data in both lists will be sorted in ascending order. Change the next pointers to obtain a single, merged linked list which also has data in ascending order. Either head pointer given may be null meaning that the corresponding list is empty.</p>

<p>Sample Input</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 -&gt; 3 -&gt; 5 -&gt; 6 -&gt; NULL
2 -&gt; 4 -&gt; 7 -&gt; NULL
</code></pre></div></div>

<p>Sample Output</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; NULL
</code></pre></div></div>

<font size="6"> Solution </font>

<p>Solution with recursion:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mergeLists</span><span class="p">(</span><span class="n">head1</span><span class="p">,</span> <span class="n">head2</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="k">if</span> <span class="n">head1</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">head2</span>
    <span class="k">if</span> <span class="n">head2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">head1</span>
    
    <span class="k">if</span> <span class="n">head1</span><span class="p">.</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">head2</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
        <span class="n">head1</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nf">mergeLists</span><span class="p">(</span><span class="n">head1</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">head2</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">head1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">head2</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nf">mergeLists</span><span class="p">(</span><span class="n">head1</span><span class="p">,</span> <span class="n">head2</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">head2</span>
</code></pre></div></div>

<p>Solution by iteratively merging two lists:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mergeLists</span><span class="p">(</span><span class="n">head1</span><span class="p">,</span> <span class="n">head2</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="k">if</span> <span class="n">head1</span><span class="p">.</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">head2</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">head1</span>
        <span class="n">head1</span> <span class="o">=</span> <span class="n">head1</span><span class="p">.</span><span class="nb">next</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">head2</span>
        <span class="n">head2</span> <span class="o">=</span> <span class="n">head2</span><span class="p">.</span><span class="nb">next</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">while</span> <span class="n">head1</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">head2</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">head1</span><span class="p">.</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">head2</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
            <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head1</span>
            <span class="n">head1</span> <span class="o">=</span> <span class="n">head1</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head2</span>
            <span class="n">head2</span> <span class="o">=</span> <span class="n">head2</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="nb">next</span>
    <span class="k">if</span> <span class="n">head1</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head2</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head1</span>
    <span class="k">return</span> <span class="n">head</span>
</code></pre></div></div>

<h2 id="queue-using-two-stacks"><a href="https://www.hackerrank.com/challenges/queue-using-two-stacks/problem">Queue using Two Stacks</a></h2>

<font size="6"> Description </font>

<p>A queue is an abstract data type that maintains the order in which elements were added to it, allowing the oldest elements to be removed from the front and new elements to be added to the rear. This is called a First-In-First-Out (FIFO) data structure because the first element added to the queue (i.e., the one that has been waiting the longest) is always the first one to be removed.</p>

<p>A basic queue has the following operations:</p>

<ul>
  <li>Enqueue: add a new element to the end of the queue.</li>
  <li>Dequeue: remove the element from the front of the queue and return it.</li>
</ul>

<p>In this challenge, you must first implement a queue using two stacks. Then process \(q\) queries, where each query is one of the following  types:</p>

<ul>
  <li>1: Enqueue element \(x\) into the end of the queue.</li>
  <li>2: Dequeue the element at the front of the queue.</li>
  <li>3: Print the element at the front of the queue.</li>
</ul>

<h2 id="pairs"><a href="https://www.hackerrank.com/challenges/pairs/problem">Pairs</a></h2>

<font size="6"> Description </font>

<p>You will be given an array of integers and a target value. Determine the number of pairs of array elements that have a difference equal to a target value.</p>

<p>For example, given an array of \([1, 2, 3, 4]\) and a target value of \(1\), we have three values meeting the condition: \(2-1=1\), \(3-2=1\), and \(4-3=1\).</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">pairs</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">arr</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">valid_dict</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
        <span class="n">valid_dict</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">valid_dict</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">valid_dict</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">total</span>
</code></pre></div></div>

<h2 id="breadth-first-search-shortest-reach"><a href="https://www.hackerrank.com/challenges/bfsshortreach/problem">Breadth First Search: Shortest Reach</a></h2>

<font size="6"> Description </font>

<p>Consider an undirected graph consisting of \(n\) nodes where each node is labeled from \(1\) to \(n\) and the edge between any two nodes is always of length \(6\). We define node \(s\) to be the starting position for a BFS. Given a graph, determine the distances from the start node to each of its descendants and return the list in node number order, ascending. If a node is disconnected, it‚Äôs distance should be \(-1\).</p>

<p>For example, there are \(n=5\) nodes in the graph with a starting node \(s=1\). The list of \(edges=[[1,2],[1,3],[3,4]]\), and each has a weight of \(6\).</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://s3.amazonaws.com/hr-assets/0/1533831000-8723efab01-bfsexample-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://s3.amazonaws.com/hr-assets/0/1533831000-8723efab01-bfsexample-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://s3.amazonaws.com/hr-assets/0/1533831000-8723efab01-bfsexample-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://s3.amazonaws.com/hr-assets/0/1533831000-8723efab01-bfsexample.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>

<p>All distances are from the start node \(1\). Outputs are calculated for distances to nodes \(2\) through \(5\): <code class="language-plaintext highlighter-rouge">[6,6,12,-1]</code>. Each edge is  units, and the unreachable node  has the required return distance of \(-1\).</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">TreeNode</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">visited</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">edges</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
    <span class="c1"># Write your code here
</span>    <span class="c1"># n: number of nodes
</span>    <span class="c1"># m: number of edges
</span>    <span class="c1"># edges: list of edges, for example, [[1,2], [1,3], [3,4]]
</span>    <span class="c1"># s: starting node
</span>
    <span class="c1"># Step 1: Build a graph
</span>    <span class="n">graph</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
        <span class="n">graph</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">children</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
        <span class="n">graph</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">children</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
    
    <span class="c1"># Step 2: BFS
</span>    <span class="n">queue</span> <span class="o">=</span> <span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">s</span><span class="p">]]</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">s</span><span class="p">].</span><span class="n">visited</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
    <span class="n">distance</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">child</span><span class="p">.</span><span class="n">visited</span><span class="p">:</span>
                <span class="n">child</span><span class="p">.</span><span class="n">visited</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">queue</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">child</span><span class="p">.</span><span class="n">val</span><span class="p">]</span> <span class="o">=</span> <span class="n">distance</span><span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">]</span> <span class="o">+</span> <span class="mi">6</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">distance</span><span class="p">:</span>
                <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<h2 id="tree-preorder-traversal"><a href="https://www.hackerrank.com/challenges/tree-preorder-traversal/problem">Tree: Preorder Traversal</a></h2>

<font size="6"> Description </font>

<p>Complete the preOrder function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must print the values in the tree‚Äôs preorder traversal as a single line of space-separated values.</p>

<font size="6"> Solution </font>

<p>HackerRank provides definition of the tree node and a function to create a tree from a list of values as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">info</span><span class="p">):</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">info</span> <span class="o">=</span> <span class="n">info</span>  
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>  
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="bp">None</span> 

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">info</span><span class="p">)</span> 

<span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>  
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span>
         
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">val</span> <span class="o">&lt;</span> <span class="n">current</span><span class="p">.</span><span class="n">info</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">current</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
                        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="n">left</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">current</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
                        <span class="k">break</span>
                <span class="k">elif</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">current</span><span class="p">.</span><span class="n">info</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">current</span><span class="p">.</span><span class="n">right</span><span class="p">:</span>
                        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="n">right</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">current</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
                        <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
</code></pre></div></div>

<p>Given this setting, we can use recursion to traverse the tree in preorder which is root -&gt; left -&gt; right.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preOrder</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="c1">#Write your code here
</span>    <span class="k">def</span> <span class="nf">_dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">info</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
        <span class="nf">_dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="nf">_dfs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
    <span class="nf">_dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="tree-huffman-coding"><a href="https://www.hackerrank.com/challenges/tree-huffman-decoding/problem">Tree: Huffman Coding</a></h2>

<font size="6"> Description </font>

<p>Huffman coding assigns variable length codewords to fixed length input characters based on their frequencies. More frequent characters are assigned shorter codewords and less frequent characters are assigned longer codewords. All edges along the path to a character contain a code digit. If they are on the left side of the tree, they will be a 0 (zero). If on the right, they‚Äôll be a 1 (one). Only the leaves will contain a letter and its frequency count. All other nodes will contain a null instead of a character, and the count of the frequency of all of it and its descendant characters.</p>

<p>For instance, consider the string ABRACADABRA. There are a total of \(11\) characters in the string. This number should match the count in the ultimately determined root of the tree. Our frequencies are \(A=5, B=2, R=2, C=1\) and \(D=1\). The two smallest frequencies are for \(C\) and \(D\), both equal to \(1\), so we‚Äôll create a tree with them. The root node will contain the sum of the counts of its descendants, in this case \(1+1=2\). The left node will be the first character encountered, \(C\), and the right will contain \(D\). Next we have \(3\) items with a character count of \(2\): the tree we just created, the character \(B\) and the character \(R\). The tree came first, so it will go on the left of our new root node. \(B\) will go on the right. Repeat until the tree is complete, then fill in the ‚Äò1‚Äô and ‚Äò0‚Äô values for the edges. The finished graph looks like:</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="https://s3.amazonaws.com/hr-assets/0/1528128577-d4e3a24f3e-huffmanExample-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="https://s3.amazonaws.com/hr-assets/0/1528128577-d4e3a24f3e-huffmanExample-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="https://s3.amazonaws.com/hr-assets/0/1528128577-d4e3a24f3e-huffmanExample-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="https://s3.amazonaws.com/hr-assets/0/1528128577-d4e3a24f3e-huffmanExample.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

    </div>
</div>

<p>Example:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>S="1001011"
Processing the string from left to right.
S[0]='1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.
We move back to the root.

S[1]='0' : we move to the left child. 
S[2]='0' : we move to the left child. We encounter a leaf node with value 'B'. We add 'B' to the decoded string.
We move back to the root.

S[3] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.
We move back to the root.

S[4]='0' : we move to the left child. 
S[5]='1' : we move to the right child. We encounter a leaf node with value C'. We add 'C' to the decoded string.
We move back to the root.

 S[6] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string.
We move back to the root.

Decoded String = "ABACA"
</code></pre></div></div>

<font size="6"> Solution </font>

<p>It takes quite a bit of time to understand the problem. In the above example, I could not understand why we could know a leaf node with value <code class="language-plaintext highlighter-rouge">A</code> there.</p>

<h2 id="is-possible-path">Is Possible Path</h2>

<font size="6"> Description </font>

<p>(Canva Coding Challenge for Machine Learning Engineer)</p>

<p>the Problem: Adam is standing at point (a,b) in an infinite 2D grid. He wants to know if he can reach point (x,y) or not. The only operation he can do is to move to point (a+b,b), (a,a+b), (a-b,b), or (a,a-b) from some point (a,b). It is given that he can move to any point on this 2D grid,i.e., the points having positive or negative X(or Y) co-ordinates.</p>

<p>Tell Adam whether he can reach (x,y) or not.</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">isPossible</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">canreach</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="ow">or</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">c</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">==</span> <span class="n">d</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="nf">canreach</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">canreach</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="sh">'</span><span class="s">Yes</span><span class="sh">'</span> <span class="k">if</span> <span class="nf">canreach</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="k">else</span> <span class="sh">'</span><span class="s">No</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="minimum-area">Minimum Area</h2>

<font size="6"> Description </font>

<p>(Canva Coding Challenge for Machine Learning Engineer)</p>

<p>Given a list of \(n\) points in a 2D plane, find the minimum area of a square formed by these points such that at least \(k\) points lie inside the square.
The points must be strickly inside the square, means that it cannot lie on a side of the square. The area must be square.</p>

<font size="6"> Solution </font>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minArea</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="c1"># Write your code here 
</span>    <span class="c1"># x: an array of integers
</span>    <span class="c1"># y: an array of integers
</span>    <span class="c1"># k: number of points inside the square
</span>    <span class="c1"># solution: must be a square, not rectangle
</span>
    <span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side</span><span class="p">):</span>
        <span class="c1"># return top_right given bottom_left and side
</span>        <span class="k">return</span> <span class="p">[</span><span class="n">bottom_left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">side</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">side</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">count_points_inside</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">top_right</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">):</span>
        <span class="c1"># check whether it is a square 
</span>        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">px</span><span class="p">,</span> <span class="n">py</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">px</span> <span class="o">&gt;</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">px</span> <span class="o">&lt;</span> <span class="n">top_right</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">py</span> <span class="o">&gt;</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">py</span> <span class="o">&lt;</span> <span class="n">top_right</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">count</span>
    
    <span class="c1"># init the square with bottom_left at min(x), min(y) 
</span>    <span class="n">bottom_left</span> <span class="o">=</span> <span class="p">[</span><span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">side</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nf">max</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">-</span> <span class="nf">min</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="c1"># side = 1
</span>    <span class="n">top_right</span> <span class="o">=</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side</span><span class="p">)</span>

    <span class="n">stop</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">stop</span><span class="p">:</span>
        <span class="n">points_inside</span> <span class="o">=</span> <span class="nf">count_points_inside</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">top_right</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">points_inside</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="p">:</span>
            <span class="n">side</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">top_right</span> <span class="o">=</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="nf">return </span><span class="p">(</span><span class="n">side</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">side</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>This solution can not pass the time limit! It is because of the count_points_inside function which is not leveraged the previous result to reduce the time. The better solution is using binary search</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># Write your code here 
</span>    <span class="c1"># x: an array of integers
</span>    <span class="c1"># y: an array of integers
</span>    <span class="c1"># k: number of points inside the square
</span>    <span class="c1"># solution: must be a square, not rectangle
</span>
    <span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side</span><span class="p">):</span>
        <span class="c1"># return top_right given bottom_left and side
</span>        <span class="k">return</span> <span class="p">[</span><span class="n">bottom_left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">side</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">side</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">count_points_inside</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">top_right</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">):</span>
        <span class="c1"># check whether it is a square 
</span>        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">px</span><span class="p">,</span> <span class="n">py</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">px</span> <span class="o">&gt;</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">px</span> <span class="o">&lt;</span> <span class="n">top_right</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">py</span> <span class="o">&gt;</span> <span class="n">bottom_left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="ow">and</span> <span class="p">(</span><span class="n">py</span> <span class="o">&lt;</span> <span class="n">top_right</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">count</span>
    
    <span class="c1"># init the square with bottom_left at min(x), min(y) 
</span>    <span class="n">bottom_left</span> <span class="o">=</span> <span class="p">[</span><span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">side_max</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nf">max</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">-</span> <span class="nf">min</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="n">side_min</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">side_mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">side_max</span> <span class="o">+</span> <span class="n">side_min</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">top_right</span> <span class="o">=</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side_mid</span><span class="p">)</span>
    
    <span class="n">valid_side</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># Binary search
</span>    <span class="k">while</span> <span class="n">side_min</span> <span class="o">&lt;</span> <span class="n">side_max</span><span class="p">:</span>
        <span class="n">points_inside</span> <span class="o">=</span> <span class="nf">count_points_inside</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">top_right</span><span class="p">,</span> <span class="n">bottom_left</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">points_inside</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="p">:</span>
            <span class="n">valid_side</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">side_mid</span><span class="p">)</span>
            <span class="c1"># reduce the size of square
</span>            <span class="n">side_max</span> <span class="o">=</span> <span class="n">side_mid</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">side_min</span> <span class="o">=</span> <span class="n">side_mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">side_mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">side_max</span> <span class="o">+</span> <span class="n">side_min</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">top_right</span> <span class="o">=</span> <span class="nf">square</span><span class="p">(</span><span class="n">bottom_left</span><span class="p">,</span> <span class="n">side_mid</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">min</span><span class="p">(</span><span class="n">valid_side</span><span class="p">)</span> <span class="o">*</span> <span class="nf">min</span><span class="p">(</span><span class="n">valid_side</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Not something fancy]]></summary></entry><entry><title type="html">Project Coding</title><link href="http://localhost:4000/blog/2024/project-coding/" rel="alternate" type="text/html" title="Project Coding" /><published>2024-10-15T22:09:55-07:00</published><updated>2024-10-15T22:09:55-07:00</updated><id>http://localhost:4000/blog/2024/project-coding</id><content type="html" xml:base="http://localhost:4000/blog/2024/project-coding/"><![CDATA[<h2 id="opp-in-python">OPP in Python</h2>

<p>Ref: <a href="https://www.geeksforgeeks.org/python-oops-concepts/">https://www.geeksforgeeks.org/python-oops-concepts/</a></p>

<h3 id="opp-concepts-in-python">OPP Concepts in Python</h3>

<ul>
  <li>Class: a blueprint for creating objects</li>
  <li>Object: an instance of a class</li>
  <li>Attribute: a variable that belongs to a class or object</li>
  <li>Method: a function that belongs to a class or object</li>
  <li>Inheritance: a class can inherit attributes and methods from another class</li>
  <li>Encapsulation: restricting access to some components of the class</li>
  <li>Polymorphism: a concept where an object can take on many forms, i.e., objects can share the same method name but those methods can act differently based on the object (overriding)</li>
  <li>Abstraction: hiding the complexity of the class and only showing the necessary features of the class</li>
  <li>Class variable: a variable that is shared among all instances of a class</li>
  <li>Instance variable: a variable that is unique to each instance of a class</li>
  <li>Special instance methods: <code class="language-plaintext highlighter-rouge">__str__</code>, <code class="language-plaintext highlighter-rouge">__repr__</code>, <code class="language-plaintext highlighter-rouge">__eq__</code></li>
  <li>Multiple inheritance: a class can inherit from multiple classes</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="c1"># class variable or attribute
</span>    <span class="n">number_of_people</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="c1"># instance variable or attribute
</span>        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old.</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
</code></pre></div></div>

<p>Initialize two objects of the class <code class="language-plaintext highlighter-rouge">Person</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">p2</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">p1</span> <span class="o">==</span> <span class="n">p2</span> <span class="c1"># False
</span></code></pre></div></div>

<p>even though <code class="language-plaintext highlighter-rouge">p1</code> and <code class="language-plaintext highlighter-rouge">p2</code> have the same name and age, they are different objects in memory.</p>

<h3 id="special-instance-methods">Special instance methods</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">__str__</code>: return a string representation of the object</li>
  <li><code class="language-plaintext highlighter-rouge">__repr__</code>: return a string representation of the object that can be used to recreate the object</li>
  <li><code class="language-plaintext highlighter-rouge">__eq__</code>: compare two objects</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p1</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span> <span class="c1"># A is 32 years old.
</span></code></pre></div></div>

<h3 id="inheritance">Inheritance</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">student_id</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">student_id</span> <span class="o">=</span> <span class="n">student_id</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old and has student ID: </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">student_id</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">MonashStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>
    <span class="k">pass</span> <span class="c1"># inherit all methods and attributes from Student
</span>
<span class="k">class</span> <span class="nc">UniMelbStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>
    <span class="k">pass</span> <span class="c1"># inherit all methods and attributes from Student
</span>
<span class="k">class</span> <span class="nc">RMITStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">student_id</span><span class="p">,</span> <span class="n">rmit_id</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">student_id</span><span class="p">)</span> <span class="c1"># inherit all methods and attributes from Student. Equivalent to super(RMITStudent, self).__init__(name, age, student_id)
</span>        <span class="c1"># Student.__init__(self, name, age, student_id) # another way to call the parent class's method
</span>        <span class="n">self</span><span class="p">.</span><span class="n">rmit_id</span> <span class="o">=</span> <span class="n">rmit_id</span> <span class="c1"># add new attribute
</span>    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># override the __str__ method of the parent class
</span>        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old and has student ID: </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">student_id</span><span class="si">}</span><span class="s"> and RMIT ID: </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">rmit_id</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span>

<span class="n">m1</span> <span class="o">=</span> <span class="nc">MonashStudent</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">123</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">m1</span><span class="p">)</span> <span class="c1"># A is 32 years old and has student ID: 123.
</span><span class="n">m2</span> <span class="o">=</span> <span class="nc">UniMelbStudent</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">124</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">m2</span><span class="p">)</span> <span class="c1"># B is 33 years old and has student ID: 124.
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">super()</code> is used to call the parent class‚Äôs methods. In case of complicated class hierarchy, <code class="language-plaintext highlighter-rouge">super()</code> is used to call the parent class‚Äôs methods without explicitly mentioning the parent class.
If <code class="language-plaintext highlighter-rouge">super(RMITStudent, self).__init__(name, age, student_id)</code> is used, it is equivalent to <code class="language-plaintext highlighter-rouge">super().__init__(name, age, student_id)</code>. However, it is recommended to use <code class="language-plaintext highlighter-rouge">super()</code> without arguments.</p>

<h3 id="multiple-inheritance">Multiple Inheritance</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">A method</span><span class="sh">"</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">B method</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">method</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C method</span><span class="sh">"</span><span class="p">)</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="nf">method</span><span class="p">()</span>
</code></pre></div></div>

<p>In the above example, <code class="language-plaintext highlighter-rouge">C</code> inherits from both <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code>. When <code class="language-plaintext highlighter-rouge">C</code> is initialized, <code class="language-plaintext highlighter-rouge">A</code> is printed first, then <code class="language-plaintext highlighter-rouge">C</code>. When <code class="language-plaintext highlighter-rouge">method</code> is called, <code class="language-plaintext highlighter-rouge">A method</code> is printed first, then <code class="language-plaintext highlighter-rouge">C method</code>.</p>

<h3 id="python-encapsulation">Python Encapsulation</h3>

<ul>
  <li>Public: accessible from outside the class</li>
  <li>Protected: accessible only to the class and subclasses</li>
  <li>Private: accessible only to the class. Private attributes are prefixed with double underscores <code class="language-plaintext highlighter-rouge">__</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">price</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="c1"># public attribute
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_model</span> <span class="o">=</span> <span class="n">model</span> <span class="c1"># protected attribute
</span>        <span class="n">self</span><span class="p">.</span><span class="n">__price</span> <span class="o">=</span> <span class="n">price</span> <span class="c1"># private attribute
</span>
    <span class="k">def</span> <span class="nf">get_price</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">__price</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">Car</span><span class="p">(</span><span class="sh">"</span><span class="s">Toyota</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Camry</span><span class="sh">"</span><span class="p">,</span> <span class="mi">20000</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># Toyota
</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">_model</span><span class="p">)</span> <span class="c1"># Camry
</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">__price</span><span class="p">)</span> <span class="c1"># AttributeError: 'Car' object has no attribute '__price'
</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="nf">get_price</span><span class="p">())</span> <span class="c1"># 20000
</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">_Car__price</span><span class="p">)</span> <span class="c1"># 20000, tricky way to access private attribute
</span></code></pre></div></div>

<p><em>Private methods are accessible outside their class, just not easily accessible. Nothing in Python is truly private; internally, the names of private methods and attributes are mangled and unmangled on the fly to make them seem inaccessible by their given names</em> (source: <a href="https://realpython.com/python-pep8/#descriptive-naming-styles">Real Python</a>).</p>

<h3 id="python-polymorphism">Python Polymorphism</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dog</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> says woof!</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">Cat</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> says meow!</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">get_pet_sound</span><span class="p">(</span><span class="n">pet</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">pet</span><span class="p">.</span><span class="nf">speak</span><span class="p">())</span>

<span class="n">d</span> <span class="o">=</span> <span class="nc">Dog</span><span class="p">(</span><span class="sh">"</span><span class="s">Dog</span><span class="sh">"</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nc">Cat</span><span class="p">(</span><span class="sh">"</span><span class="s">Cat</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">get_pet_sound</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="c1"># Dog says woof!
</span><span class="nf">get_pet_sound</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1"># Cat says meow!
</span></code></pre></div></div>

<h3 id="python-abstraction">Python Abstraction</h3>

<p>It hides unnecessary code details from the user. Also,  when we do not want to give out sensitive parts of our code implementation and this is where data abstraction came.</p>

<p>Data Abstraction in Python can be achieved by creating abstract classes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">Shape</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">perimeter</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>

    <span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mf">3.14</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">radius</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">radius</span>

    <span class="k">def</span> <span class="nf">perimeter</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="mf">3.14</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">radius</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="nf">area</span><span class="p">())</span> <span class="c1"># 78.5
</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="nf">perimeter</span><span class="p">())</span> <span class="c1"># 31.4
</span></code></pre></div></div>

<p>In the above example, <code class="language-plaintext highlighter-rouge">Shape</code> is an abstract class with two abstract methods <code class="language-plaintext highlighter-rouge">area</code> and <code class="language-plaintext highlighter-rouge">perimeter</code>. <code class="language-plaintext highlighter-rouge">Circle</code> is a subclass of <code class="language-plaintext highlighter-rouge">Shape</code> and it implements the <code class="language-plaintext highlighter-rouge">area</code> and <code class="language-plaintext highlighter-rouge">perimeter</code> methods.
The <code class="language-plaintext highlighter-rouge">Shape</code> class is an abstract class because it has abstract methods. An abstract class cannot be instantiated.
For example, <code class="language-plaintext highlighter-rouge">s = Shape()</code> will raise an error.</p>

<h2 id="multithreading-in-python">Multithreading in Python</h2>

<p><a href="https://www.geeksforgeeks.org/multithreading-python-set-1/">https://www.geeksforgeeks.org/multithreading-python-set-1/</a></p>

<h2 id="mongodb---pymongo">MongoDB - PyMongo</h2>
<p>https://www.w3schools.com/python/python_mongodb_create_db.asp</p>

<p>Records in a MongoDB database are called documents, and the field values may include numbers, strings, booleans, arrays, or even nested documents.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
	title: "Post Title 1",
	body: "Body of post.",
	category: "News",
	likes: 1,
	tags: ["news", "events"],
	date: Date()
}
</code></pre></div></div>

<h3 id="sql-vs-document-databases">SQL vs Document Databases</h3>
<p>SQL databases are considered relational databases. They store related data in separate tables. When data is needed, it is queried from multiple tables to join the data back together.</p>

<p>MongoDB is a document database which is <strong>often referred to as a non-relational database</strong>. This does not mean that relational data cannot be stored in document databases. It means that relational data is stored differently. A better way to refer to it is as a non-tabular database.</p>

<p>MongoDB stores data in flexible documents. Instead of having multiple tables you can simply keep all of your related data together. This makes reading your data very fast.</p>

<p>You can still have multiple groups of data too. In MongoDB, instead of tables these are called collections.</p>

<h3 id="pymongo">PyMongo</h3>

<p>PyMongo is a Python distribution containing tools for working with MongoDB, and is the recommended way to work with MongoDB from Python.</p>

<p>Some important functions in PyMongo:</p>

<p>Create a database:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pymongo</span>

<span class="n">myclient</span> <span class="o">=</span> <span class="n">pymongo</span><span class="p">.</span><span class="nc">MongoClient</span><span class="p">(</span><span class="sh">"</span><span class="s">mongodb://localhost:27017/</span><span class="sh">"</span><span class="p">)</span>

<span class="n">mydb</span> <span class="o">=</span> <span class="n">myclient</span><span class="p">[</span><span class="sh">"</span><span class="s">mydatabase</span><span class="sh">"</span><span class="p">]</span>
</code></pre></div></div>

<p>Check if a database exists:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">myclient</span><span class="p">.</span><span class="nf">list_database_names</span><span class="p">())</span>
</code></pre></div></div>

<p>Create a collection:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mycol</span> <span class="o">=</span> <span class="n">mydb</span><span class="p">[</span><span class="sh">"</span><span class="s">customers</span><span class="sh">"</span><span class="p">]</span>
</code></pre></div></div>

<p>Check if a collection exists:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">mydb</span><span class="p">.</span><span class="nf">list_collection_names</span><span class="p">())</span>
</code></pre></div></div>

<p>Insert a document:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mydict</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Highway 37</span><span class="sh">"</span> <span class="p">}</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">mycol</span><span class="p">.</span><span class="nf">insert_one</span><span class="p">(</span><span class="n">mydict</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">inserted_id</span><span class="p">)</span>
</code></pre></div></div>

<p>The insert_one() method returns a InsertOneResult object, which has a property, inserted_id, that holds the id of the inserted document.</p>

<p>Insert multiple documents with specified IDs:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pymongo</span>

<span class="n">myclient</span> <span class="o">=</span> <span class="n">pymongo</span><span class="p">.</span><span class="nc">MongoClient</span><span class="p">(</span><span class="sh">"</span><span class="s">mongodb://localhost:27017/</span><span class="sh">"</span><span class="p">)</span>
<span class="n">mydb</span> <span class="o">=</span> <span class="n">myclient</span><span class="p">[</span><span class="sh">"</span><span class="s">mydatabase</span><span class="sh">"</span><span class="p">]</span>
<span class="n">mycol</span> <span class="o">=</span> <span class="n">mydb</span><span class="p">[</span><span class="sh">"</span><span class="s">customers</span><span class="sh">"</span><span class="p">]</span>

<span class="n">mylist</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Highway 37</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Peter</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Lowstreet 27</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Amy</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Apple st 652</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hannah</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Mountain 21</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Michael</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Valley 345</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sandy</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ocean blvd 2</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Betty</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Green Grass 1</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Richard</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sky st 331</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Susan</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">One way 98</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Vicky</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Yellow Garden 2</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ben</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Park Lane 38</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">William</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Central st 954</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Chuck</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Main Road 989</span><span class="sh">"</span><span class="p">},</span>
  <span class="p">{</span> <span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Viola</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sideway 1633</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">mycol</span><span class="p">.</span><span class="nf">insert_many</span><span class="p">(</span><span class="n">mylist</span><span class="p">)</span>

<span class="c1">#print list of the _id values of the inserted documents:
</span><span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">inserted_ids</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="gradio">Gradio</h2>

<h3 id="event-listerners">Event Listerners</h3>

<h4 id="description">Description</h4>

<p>Event listeners allow you to respond to user interactions with the UI components you‚Äôve defined in a Gradio Blocks app. When a user interacts with an element, such as changing a slider value or uploading an image, a function is called.</p>

<p>Two important events are <code class="language-plaintext highlighter-rouge">upload</code> and <code class="language-plaintext highlighter-rouge">click</code></p>

<p>To re-upload a file, click to symbol <code class="language-plaintext highlighter-rouge">x</code> at the corner</p>

<h4 id="get-the-value-of-an-element">Get the value of an element</h4>

<p>To get the value of an element, use the <code class="language-plaintext highlighter-rouge">value</code> attribute of the element. For example, to get the value of a slider, use <code class="language-plaintext highlighter-rouge">slider.value</code>.</p>

<h4 id="example">Example</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">gradio</span> <span class="k">as</span> <span class="n">gr</span>

<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Hello </span><span class="sh">"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">!</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">upload_file</span><span class="p">(</span><span class="nb">file</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">file</span><span class="p">.</span><span class="n">name</span>

<span class="k">def</span> <span class="nf">click_button</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Button clicked!</span><span class="sh">"</span>

<span class="n">iface</span> <span class="o">=</span> <span class="n">gr</span><span class="p">.</span><span class="nc">Interface</span><span class="p">(</span>
    <span class="n">fn</span><span class="o">=</span><span class="n">greet</span><span class="p">,</span>
    <span class="n">inputs</span><span class="o">=</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">outputs</span><span class="o">=</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Greet</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Greet someone by their name.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">iface</span><span class="p">.</span><span class="nf">launch</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="html">HTML</h2>

<h3 id="basic">Basic</h3>

<ul>
  <li>HTML stands for Hyper Text Markup Language</li>
  <li>HTML and CSS are not programming languages. They are markup languages.</li>
  <li>HTML is used to define the structure of a web page.</li>
  <li>CSS is used to style a web page.</li>
</ul>

<h3 id="basic-structure">Basic Structure</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    Hello World
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="html-tags">HTML Tags</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;html&gt;</code>: The root element of an HTML document.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>: The head element contains meta-information about the HTML document.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;title&gt;</code>: The title of the HTML document.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>: The body of the HTML document.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> to <code class="language-plaintext highlighter-rouge">&lt;h6&gt;</code>: Headings of different levels.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>: Paragraph.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>: Anchor, used for links.</li>
</ul>

<p>In HTML, there are two types of tags:</p>

<ul>
  <li>Block-level elements: These elements start on a new line and take up the full width available to them. Examples include <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code>.</li>
  <li>Inline elements: These elements do not start on a new line and only take up as much width as necessary. Examples include <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code>.</li>
</ul>

<h3 id="html-attributes">HTML Attributes</h3>

<p>HTML attributes provide additional information about HTML elements. They are always specified in the start tag and usually come in pairs like <code class="language-plaintext highlighter-rouge">name="value"</code>.</p>

<h3 id="define-a-new-html-element">Define a new HTML element</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tagname</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>Content goes here...<span class="nt">&lt;/tagname&gt;</span>
</code></pre></div></div>

<p>And style it with CSS:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
    <span class="nt">tagname</span> <span class="p">{</span>
        <span class="py">property</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>We can also define a new class in HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"myclass"</span><span class="nt">&gt;</span>Content goes here...<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>And style it with CSS:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
    <span class="nc">.myclass</span> <span class="p">{</span>
        <span class="py">property</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<h2 id="java-script">Java Script</h2>

<h3 id="basic-1">Basic</h3>]]></content><author><name></name></author><category term="work" /><category term="coding" /><summary type="html"><![CDATA[Learn code for better life]]></summary></entry><entry><title type="html">My approach to ARC Challenge</title><link href="http://localhost:4000/blog/2024/arc/" rel="alternate" type="text/html" title="My approach to ARC Challenge" /><published>2024-10-07T00:00:00-07:00</published><updated>2024-10-07T00:00:00-07:00</updated><id>http://localhost:4000/blog/2024/arc</id><content type="html" xml:base="http://localhost:4000/blog/2024/arc/"><![CDATA[<h1 id="what-is-arc">What is ARC?</h1>

<p>In 2019, Fran√ßois Chollet, the creator of Keras, published the influential paper ‚ÄúOn the Measure of Intelligence‚Äù where he introduced a benchmark to measure the efficiency of AI skill-acquisition on unknown tasks called <a href="https://github.com/fchollet/ARC-AGI">Abstraction and Reasoning Corpus for Artificial General Intelligence (ARC-AGI)</a>.</p>

<p><strong>ARC-AGI Design Principles</strong></p>

<div class="text-center mt-3 mt-md-0">
    <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2024-arc/arc-example-task-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2024-arc/arc-example-task-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2024-arc/arc-example-task-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/2024-arc/arc-example-task.jpg" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

</figure>

</div>
<div class="caption text-center">
    ARC-AGI Example Task
</div>

<p>Detail can be found on <a href="https://arcprize.org/arc">https://arcprize.org/arc</a></p>

<h2 id="arc-agi-pub">ARC-AGI-Pub</h2>

<p>This is a secondary leaderboard measuring the ARC-AGI public evaluation set.</p>

<h3 id="public-data">Public Data</h3>

<p>The publicly available data is to be used for training and evaluation.</p>

<p>The public training set contains 400 task files you can use to train your algorithm.</p>

<p>The public evaluation set contains 400 task files for to test the performance of your algorithm.</p>

<p>To ensure fair evaluation results, be sure not to leak information from the evaluation set into your algorithm (e.g., by looking at the tasks in the evaluation set yourself during development, or by repeatedly modifying an algorithm while using its evaluation score as feedback.)</p>

<p>The source of truth for this data is available on Fran√ßois Chollet‚Äôs <a href="https://github.com/fchollet/ARC-AGI">ARC-AGI GitHub Repository</a>, which contains 800 total tasks.</p>

<h1 id="resources">Resources</h1>
<hr />
<ul>
  <li><a href="https://arcprize.org/">https://arcprize.org/</a></li>
  <li><a href="https://www.kaggle.com/competitions/arc-prize-2024">https://www.kaggle.com/competitions/arc-prize-2024</a></li>
  <li><a href="https://volotat.github.io/ARC-Game/">https://volotat.github.io/ARC-Game/</a></li>
  <li><a href="https://www.kaggle.com/competitions/arc-prize-2024/code">https://www.kaggle.com/competitions/arc-prize-2024/code</a>: Code from other participants</li>
</ul>]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[What is ARC?]]></summary></entry></feed>